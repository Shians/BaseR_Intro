[
["index.html", "Introduction to Base R Preface 0.1 Data files", " Introduction to Base R Lucy Liu 2019-05-10 Preface This introduction to base R course was designed for biologists with no previous programming experience. It has a focus on analysing RNA-sequencing data using the Bioconductor package limma. The F1000 paper ‘RNA-seq analysis is easy as 1-2-3 with limma, Glimma and edgeR’ was used as a guide for the latter sessions. It is intended to be delivered over four 2.5 hour workshops at the Walter and Eliza Hall Institute of Medical Research (WEHI). 0.1 Data files The data files require for this workshop are available on Github. To download a data file click on the file you wish to download then right click ‘Raw’ &gt; ‘Save Link As…’: Acknowledgements Thank you to Shian Su, Brendan Ansell and Professor Gordon Smyth for your suggestions and review of this tutorial. This page was generated using the bookdown package by YiHui Xie. The source code for this page can be found on Github. "],
["session-1.html", "Chapter 1 Session 1 1.1 R and RStudio 1.2 R scripts 1.3 Help 1.4 Working directory 1.5 Maths 1.6 Comparisons 1.7 Variables 1.8 Data structures 1.9 Reading in data 1.10 Data types 1.11 Writing out data 1.12 Homework 1.13 Answers", " Chapter 1 Session 1 In this first session we will learn about: R and RStudio data types and data structures vectorisation how to read in and write out data 1.1 R and RStudio R is a free and open source statistical programming language, great for performing data analysis. RStudio is a free and open source R integrated development environment (IDE) which makes it easier for you to write code. It does this by providing you with auto-completion (of variable names, function names, file paths etc.), helping with formatting and keeping track of your variables. You can think of R as the engine in a car and RStudio as the body &amp; controls. R is doing all the calculations/computations but RStudio makes it easier for you to use R. When you first open RStudio, there will be three panels - see Figure 1.1 (don’t worry if your RStudio does not have the same colours/appearance - different versions of RStudio look slightly different and the text colour I use is not the default one.) Figure 1.1: Three panels in RStudio. Left panel: this panel features two tabs, ‘Console’, which is where you can type in commands for R to run and ‘Terminal’, which we won’t worry about in this course. Top right panel: Environment - in this tab you can see all variables you have created. History - R keeps track of all commands you have run and you can review them in this tab. Connections - this tab helps you connect to data sources but we will not be using it in this course. Bottom right: Files - you can explore your file directory here and we will use it to set our working directory later. Plots - plots that you create will either appear here or be saved to a file. Help - help files for R functions can be viewed in this tab. Help files tell you about what a function does and how to use it. Packages - basic R includes many useful functions. You can add even more functions by downloading packages. A package is a collection of functions, generally with a certain data analysis theme. For example, the package ‘limma’, which we will use later, includes functions for analysing RNA-sequencing data. Viewer - this tab lets you view local web content but we won’t be using it in this course. 1.2 R scripts To open a R script, go to File &gt; New File &gt; R Script. Figure 1.2: Opening a new R Script. This will open a fourth panel on the top left. Figure 1.3: Four panels, including a R Script. A R Script is just a text document. You can type and run commands using a R Script and down in the Console - the difference is that you can’t save the commands you run in the Console but you can save the R Script with all your commands. Note that to run a command in the Console press Enter key but to run a command in a R Script you must press Cmd/Cntrl + Enter keys. Lastly, you can make ‘comments’ in your R Script. Comments are notes to yourself that are not interpreted by R and start with #: # this is a note to myself 1+3-2 ## [1] 2 1.3 Help There are two ways to access help files in RStudio. You can type in the name of the function you want help with, in the top right of help tab (indicated with a red arrow): Figure 1.4: Accessing help files via ‘help’ tab. The other option is to run the command ? followed by the name of the function: ?sum Help files are very useful but can be difficult to interpret at first due to the technical language used. We won’t get too much practice reading help files during this course but I would encourage you to try to use them when figuring out how to use a new function. 1.4 Working directory Every file on your computer is located in a specific location. This location can be referred to by a path. In Mac, paths look something like this: /Users/Lucy/Documents/. In Windows, paths look something like this: C:\\Users\\Lucy\\Documents\\. When you open a R session, it launches from a specific location. You can find out where this is using the command getwd(). This location called the ‘working directory’. R will, by default, look in this directory when reading in data and write out files/plots to this directory. It is often useful to have your data and R Scripts in the same directory and set this as your working directory. You can set your working directory to be anywhere you like and we will now do this: Make a folder for this course, somewhere sensible on your computer that you will be able to easily find. Go back to your RStudio window, go to the bottom right panel, click on the ‘Files’ tab and then click on the three dots on the top right hand corner (Figure 1.5). Figure 1.5: Setting the working directory - 1. This will open up a new window (Figure 1.6) which lets you explore the files and folders on your computer. Find the new folder you created, click on it then click ‘Open’. Figure 1.6: Setting the working directory - 2. The files tab will now show the contents of your new folder (which should be empty). At the top of the files tab, click on More &gt; Set As Working Directory (Figure 1.7). Figure 1.7: Setting the working directory - 3. Please set your working directory to be this folder at the start of EVERY session. 1.5 Maths R performs maths and follows standard order of operations. In order of highest to lowest precedence, here is how mathematical operations are denoted in R: () - parentheses ** or ^ - exponents / - divide * - multiply + - add - - subtract Another useful function is modulus (%%), which gives the remainder after dividing: 8%%3 ## [1] 2 1.6 Comparisons You can also compare numbers in R: 1 == 1 # equal to. ## [1] TRUE 2 &gt; 1 # greater than. ## [1] TRUE 2 &lt; 1 # less than. ## [1] FALSE 1 &lt;= 2 # greater or equal to. ## [1] TRUE 1 &gt;= 2 # less than or equal to. ## [1] FALSE What do you think will happen if we compare words? &quot;cat&quot; &gt; &quot;dog&quot; ## [1] FALSE R will use alphabetical order to determine which word is ‘greater’: &quot;a&quot; &lt; &quot;b&quot; ## [1] TRUE 1.7 Variables A variable in R is just a name which refers to an ‘thing’ (more technically an ‘object’ in R). For example, I can do some maths: 2 + 6 * 7**2 ## [1] 296 R outputs the result. However, if I want to ‘save’ this result to use later, I need to ‘assign’ the output to a variable. This can be thought of as giving it a name, so that we can refer to it later. You can this with &lt;- (shortcut = alt + -) in R. (You can also use =, however stylistically &lt;- is preferred.) Here R performs the calculation on the right of &lt;- and then saves the result as a variable called my_num. my_num &lt;- 2 + 6 * 7**2 Now if I run the command my_num, I see the number I stored earlier: my_num ## [1] 296 You can also ‘overwrite’ variables: my_num &lt;- 3 * 4 The above code evaluates 3 * 4 and assigns the output to the variable my_num - effectively ‘overwritting’ the previous value assigned to it. my_num ## [1] 12 R is particular about variable names. Variable names cannot: start with a number contain any spaces If we try to create a variable that starts with a number, R will return an error: 2myvar &lt;- 2 + 6 * 7**2 ## Error: &lt;text&gt;:1:2: unexpected symbol ## 1: 2myvar ## ^ 1.7.1 Errors and warnings This is a good time to talk about ‘errors’ and ‘warnings’ in R. An error is R telling you that it couldn’t do what you told it to do. Do not be disheartened at seeing an error message - it happens to everyone, including experienced programmers, all the time. DO read the error message, it is often very useful and tells you what you need to do to fix the error. A warning is R telling you that is has done what you told it to do, however the result may not be what you want. Sometimes it is okay to ignore a warning, sometimes it is not! 1.8 Data structures A data structure can be thought of as a ‘container’ for data. There are a number of different data structures in R and each have different specifications about how data is stored. Three commonly used data structures are summarised below: Figure 1.8: Data structures. Source: http://libguides.wellesley.edu. Another useful data structure is a ‘list’, which we will talk about in Session 3. 1.8.1 Vector You can think of a vector like a row or column in excel. You can only store one type of data in a vector - e.g. all numbers or all text. You can create vectors with the c() function (‘c’ for ‘combine’): my_vect1 &lt;- c(1,2,3) my_vect2 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) 1.8.2 Matrix A matrix is like an excel spreadsheet. It is two dimensional meaning you have columns and rows of data. You can only store one type of data in a matrix - e.g. all numbers or all text. 1.8.3 Dataframe Dataframes are also two dimensional (has both rows and columns) however, you can store different types of data in a dataframe. The only restriction is that all the data within one column must be of the same type. 1.9 Reading in data Let’s read in some data and start exploring it. You should have received the data files via email before the course. Please download these files and make sure they are located in your working directory. Recall, we set our working directory above. You can find the location of your working directory with the function getwd(). If you are following along outside of the WEHI course, you can download the data files from Github - instructions for downloading data from GitHub can be found in the Preface. The file we want to read in is named ‘Ses1_genes.tsv’. I have put all my data files in a directory called ‘data’ - thus the path to the file (relative to my working directory) is ‘data/Ses1_genes.tsv’. Depending on where you have put your data (in your working directory or in another file in your working directory), the path to your file ‘Ses1_genes.tsv’ may be different. Read in your data by typing in the path to your ‘Ses1_genes.tsv’ file (relative to your working directory), within the brackets ( ): read.delim(&quot;data/Ses1_genes.tsv&quot;) ## SYMBOL GeneLength Count ## 1 Gm10568 1634 0 ## 2 Gm19860 799 4 ## 3 Gm19938 3259 0 ## 4 Lypla1 2433 768 ## 5 Rp1 9747 0 ## 6 Sox17 3130 1 ## 7 Tcea1 2847 810 ## 8 Mrpl15 4203 431 ## 9 Xkr4 3634 1 ## 10 Rgs20 2241 452 Note that read.delim() also lets you specify what kind of file you are reading in - by this I mean how each value is separated. Two common formats are ‘csv’ (comma separated values) and ‘tsv’ (tab separated values). Example of csv file: Name, Age Andy, 10 Bob, 8 Example of tsv file: Name Age Andy 10 Bob 8 Notice in the above two examples the values are separated by different ‘characters’. You can specify what ‘character’ separates each value by using the sep input in read.delim(). E.g. if your file was a csv, you can read it in using: read.delim(&quot;file.csv&quot;, sep = &quot;,&quot;) We don’t need to specify the sep for our file, which is a tsv, as the default separater read.delim() is tab. We only need to specify the separater character when we are reading in a file NOT separated by tabs. Above, we have read in our data as a dataframe and printed it. However, we can’t refer to this dataframe again and manipulate it because we haven’t assigned it to a variable. Let’s assign our dataframe to a variable called genes: genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;) Notice how genes now appears in our ‘Environment’ tab: Figure 1.9: Variable in ‘Environment’ tab. All variables that we create will be shown in this tab, so it is a useful way to keep track of variables that we have created. Notice how R also tells us that there are 10 observations (rows) and 3 variables (columns) in the genes dataframe. 1.9.1 Summary A useful function for investigating your data is summary(). Running this function on our genes dataframe provides us with summary statistics on all the numeric columns. For the columns that don’t contain numbers, the output simply states the length of that column. summary(genes) ## SYMBOL GeneLength Count ## Gm10568:1 Min. : 799 Min. : 0.00 ## Gm19860:1 1st Qu.:2289 1st Qu.: 0.25 ## Gm19938:1 Median :2988 Median : 2.50 ## Lypla1 :1 Mean :3393 Mean :246.70 ## Mrpl15 :1 3rd Qu.:3540 3rd Qu.:446.75 ## Rgs20 :1 Max. :9747 Max. :810.00 ## (Other):4 1.9.2 Structure A useful function for understanding how our data is stored in R is str() (structure). str(genes) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : Factor w/ 10 levels &quot;Gm10568&quot;,&quot;Gm19860&quot;,..: 1 2 3 4 7 8 9 5 10 6 ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 The output tells us that genes is a dataframe. It also tells us what data type each column is. 1.10 Data types Every bit of data in R has a ‘data type label’. The label doesn’t change the data in any way - it just tells R what kind of data it is and thus what it can and can’t do with the data. For example, it makes sense to perform mathematical functions on numbers but not on words. It makes sense to look for a certain term, like a gene name, in words but not in numbers. For example, you can’t add words so the code belwo doesn’t work. Note that quotes (&quot; &quot; or ' ') ALWAYS surround values that are of the ‘character’ data type: &quot;one&quot; + &quot;two&quot; ## Error in &quot;one&quot; + &quot;two&quot;: non-numeric argument to binary operator This does work because they are numbers: 1 + 2 ## [1] 3 There are five basic types of data in R: logical - either TRUE or FALSE. This is useful for data that only has two possible values, like if patient has a disease or not. integer - number without decimal point e.g. 3. double - number with decimal point e.g. 3.14. complex - complex number with a real and imaginary part e.g. 1 + 3i character - Anything with character(s) within it. Quotes (double or single) signify this data type e.g. &quot;pi&quot;. Also known as a ‘string’. In our genes dataframe above, we can see that both the GeneLength and Count columns are integers (‘int’). But what is the SYMBOL column? It is a ‘Factor’. 1.10.1 Factors Factor is a data type label used for categorical variables (e.g. small, medium and large OR red, blue and green). Internally, R stores factors as numbers (integers), with each number corresponding to a category. For example, if your data was: red, blue, green, red, green Internally, R would store the data as: 1, 2, 3, 1, 3 Each number corresponds to a category. This information is also stored. In R, the categorical values each number corresponds to, is called ‘levels’. The levels for the above data would be: 1 = red 2 = blue 3 = green Factors can be difficult to work with, so we don’t want our gene symbols to be ‘labelled’ as factors. We can do this by specifying this when reading our data in: genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;, stringsAsFactors = FALSE) By default, R will label all word (‘character’) data as a ‘factor’. Setting stringsAsFactors to be FALSE, tells R that you DON’T want it to do this. We can check the structure again: str(genes) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : chr &quot;Gm10568&quot; &quot;Gm19860&quot; &quot;Gm19938&quot; &quot;Lypla1&quot; ... ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 Notice that now the column SYMBOL is now a character (‘chr’). Another way to change the labels of data in R is with the following functions: as.logical() as.integer() as.double() as.complex() as.character() For example, this will turn a integer vector into a character vector: as.character(c(1,2,3)) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; 1.10.2 Type coercion In some circumstances, R will change the data type label of your data. This is called ‘type coercion’. A common scenario in which this will happen is with vector (and dataframe column) labeling. All elements within a vector (and within a column of a dataframe) must have the same data type label. Thus, if you create a vector like the one below, the whole vector will be labelled as one data type. Which data type do you think it will be? my_vect3 &lt;- c(1, 2, &quot;a&quot;) We can find out with str(): str(my_vect3) ## chr [1:3] &quot;1&quot; &quot;2&quot; &quot;a&quot; It has labelled the whole vector as characters. This is because the letter &quot;a&quot; cannot be “expressed” as a number but numbers can be “expressed” as characters - thus R will always pick the data type label that does not result in any loss of information. Recall that data type labels NEVER change the data - only the label changes. There is an order to which data label R will label a vector as. Of all the data types that exist in the vector, the data type of the element that is furthermost right, will be the “final” data type label for the vector. logical &gt; integer &gt; double &gt; complex &gt; character This order makes sense: the logicals TRUE and FALSE can be represented by numbers with TRUE = 1 and FALSE = 0. when logicals are labelled as the character type, TRUE simply becomes &quot;TRUE&quot; an integer can easily be represented by a double - 3 becomes 3.0 as we saw above, numbers can easily be represented as a character The last thing to note is that you may see the type num: str(c(1,2,3)) ## num [1:3] 1 2 3 num stands for numeric and is just the ‘number’ data types grouped together. R does this for two reasons. First, generally you don’t need to know exactly what ‘type’ of number class your data is. Second, R will often convert between number types depending the type of calculations/function performed. Challenge 1.2 What data type will the following vectors be? # 1 c(TRUE, 3, 4) # 2 c(&quot;hello&quot;, TRUE, 4) # 3 c(4, &quot;5&quot;) Create a vector called my_vect3 that contains the following numbers: 1,1,2,3,5,8. Convert this vector into the character data type. How can you tell that the values are now characters? 1.11 Writing out data The last thing we will do this session is learn to write out data using the function write.table(). There are a few things we must tell write.table(), for it to be able to write out the data the way we want: x - the name of this input is not very informative, but first you must tell the function what you want to write out. In our case we want to write out our dataframe genes. file - the name of the file that we want to write to. sep - how each value in our output file is separated. Common file formats are ‘csv’ and ‘tsv’ (discussed above). In R, a tab is represented by &quot;\\t&quot;. row.names - this is either TRUE or FALSE, and let’s you specify whether you want to write out row names. If your dataframe does not have row names, put FALSE. col.names - this is also either TRUE or FALSE, and let’s you specify whether you want to write out column names. If your dataframe has column names, put TRUE. We can write out our genes dataframe into a .tsv file using the command below: write.table(x = genes, file = &quot;Ses1_Genes_output.tsv&quot;, sep = &quot;\\t&quot;, row.names = FALSE, col.names = TRUE) 1.12 Homework A dataframe is composed of vectors, with each vector being one column. You can create a dataframe using the data.frame() function: my_df &lt;- data.frame( name = c(&quot;bob&quot;, &quot;amy&quot;), age = c(23,34) ) my_df ## name age ## 1 bob 23 ## 2 amy 34 There are a few important things to note: name and age become the names of the columns. the , at the end of name = c(&quot;bob&quot;, &quot;amy&quot;) is important and should not be missed. each column in a dataframe is essentially a vector. Do not forget the c() when inputing the values within each column. You can access a column in a dataframe with the shortcut $. Notice that the names of all columns of the dataframe appears after typing in my_df$: Figure 1.10: Accessing columns in a dataframe using the ‘$’ symbol. Create a dataframe called cats with 2 columns. The first column named “name” should be a vector with the values: “Garfield”, “Hello Kitty”. The second column named “weights” should be a vector with the following values: 5.5, 4.8. Write this dataframe out to a .tsv file named ‘Ses1_cats.tsv’. 1.13 Answers Challenge 1.1 str(c(TRUE, 3, 4)) ## num [1:3] 1 3 4 str(c(&quot;hello&quot;, TRUE, 4)) ## chr [1:3] &quot;hello&quot; &quot;TRUE&quot; &quot;4&quot; str(c(4, &quot;5&quot;)) ## chr [1:2] &quot;4&quot; &quot;5&quot; my_vect3 &lt;- c(1,1,2,3,5,8) # convert to character my_vect3 &lt;- as.character(my_vect3) # quotes around each value show that they are of the character type my_vect3 ## [1] &quot;1&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;5&quot; &quot;8&quot; "],
["session-2.html", "Chapter 2 Session 2 2.1 Missing values 2.2 Subsetting 2.3 Vectorisation 2.4 Functions 2.5 Homework 2.6 Answers", " Chapter 2 Session 2 In this session we will learn about: missing values subsetting data structures how functions are created and used 2.1 Missing values First, let’s read in some data. Recall we use the function read.delim() and tell R not to label words (character type data) as ‘Factors’ using stringsAsFactors = FALSE. We are using the file “Ses2_genes.tsv” today. This would have been emailed to you before the session. (Alternatively you can download the data from GitHub). genes &lt;- read.delim(&quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE) You can see in the environment tab that this dataframe has 200 rows (observations) and 5 columns (variables). You can also click on the genes entry in the Environment tab (red arrow in Figure 2.1) to display the data in a new window (left): Figure 2.1: Viewing data from the ‘Environment’ tab. Scrolling down the window, you can see that there are several NA entries. NA denotes a missing value in R. NA‘s have some interesting behaviour - they are ’contagious’. For example, if we wanted to take the mean of a vector numbers, which includes a NA, the answer is NA. If we think about it, it makes sense that the mean of two numbers and a ‘missing’ number, that could be anything, is NA. mean(c(2,3,NA)) ## [1] NA Luckily many functions have a na.rm option, where you can tell it to remove NA values: mean(c(2,3,NA), na.rm = TRUE) ## [1] 2.5 Later, we will learn how to remove the NA values from our dataframe. 2.2 Subsetting Subsetting involves selecting a portion of a data structure and uses square brackets [ ]. There are two main ways to subset a data structure: Use indices - data structures are all ordered and ‘numbered’ in R. This means that you can refer to the 4th element in a vector or the element in the 1st row and 3rd column of a dataframe. Use logicals - recall that a logical is TRUE or FALSE. You can use comparisons (e.g. equal to ==, greater than &gt;) to determine if each element in your data structure meet your requirements and use this to subset your data. 2.2.1 Subsetting with indicies Let’s take a look at subsetting vectors first. We can use $ to obtain just one column from the genes dataframe. The output will be a vector. genes$Count ## [1] 979 15 932 0 214 2 2 0 1790 41 1033 ## [12] 700 2075 351 22 0 0 893 3 100 32100 269 ## [23] 34 20005 5751 0 275 9 849 7175 768 358 234 ## [34] 5065 2096 1994 757 0 2310 0 1 0 3091 810 ## [45] 30 816 817 1 580 33 0 941 1445 522 2 ## [56] 2346 572 431 5797 2 70 1236 966 235 2 3009 ## [67] 431 452 2602 3481 99 11857 35 1952 0 706 1317 ## [78] 1130 92 0 871 730 3892 3772 20 7 0 756 ## [89] 1 210 101 17 21 537 1240 930 1 1 0 ## [100] 221 1599 0 67 1 0 315 0 0 739 0 ## [111] 0 976 1 715 18636 289 1396 0 101 285 1665 ## [122] 47 2 4483 2 363 169 135 0 2 0 11 ## [133] 4088 1082 92 0 3888 17 0 0 0 0 0 ## [144] 0 0 0 0 0 2442 30 1610 0 0 0 ## [155] 16 1 2 0 47 0 1118 0 1 0 2 ## [166] 3 22 0 0 0 0 0 0 0 431 0 ## [177] 0 16 0 1 0 4 0 0 1 0 0 ## [188] 0 0 301 0 0 0 0 0 0 0 0 ## [199] 0 59 We will assign this to a variable called Counts. Counts is now a variable that refers to a vector containing 200 integers. Counts &lt;- genes$Count This will give you the 3rd element of the vector Counts: Counts[3] ## [1] 932 This will give you all the elements from the 3rd to the 10th: Counts[3:10] ## [1] 932 0 214 2 2 0 1790 41 This will give you the 3rd, 5th and 10th elements: Counts[c(3,5,100)] ## [1] 932 214 221 Note that we have used c() within the square brackets. This is because R expects ONE ‘object’ within the square brackets. Thus, if you want to extract several indices, you must give it ONE vector containing the indices of the elements. A vector (e.g. c(3,5,10)) is considered one ‘object’ but the numbers 3,5,10 are considered three different ‘objects’. Indeed, 3:10, which we used earlier, is actually a vector of the numbers 3 to 10: 3:10 ## [1] 3 4 5 6 7 8 9 10 Lastly, this gives you all the elements EXCEPT the elements 10 through to 200: Counts[-(10:200)] ## [1] 979 15 932 0 214 2 2 0 1790 Subsetting a 2 dimensional data structure (e.g. a dataframe or matrix) is similar to subsetting a vector, except you now must specify which rows AND which columns you want. The syntax for the genes dataframe looks like this: genes[ (which rows you want) , (which columns you want) ] Within the square brackets, you must first tell R which rows you want LEFT of the comma, then which columns you want RIGHT of the comma. The code below will give you the 3rd to 5th rows of the 2nd and 4th columns. Note that the output is a dataframe. genes[3:5,c(2,4)] ## SYMBOL GeneLength ## 3 Bmp2 2515 ## 4 Cacna1e 12697 ## 5 Ccnf 3099 We could have also done this using the names of the columns. Note that column names are enclosed in quotes signifying that they are of the ‘character’ data type. genes[3:5,c(&quot;SYMBOL&quot;,&quot;GeneLength&quot;)] ## SYMBOL GeneLength ## 3 Bmp2 2515 ## 4 Cacna1e 12697 ## 5 Ccnf 3099 If you leave the left side of comma empty, R will give you ALL the rows. If you leave the right side of the comma empty, R will give you ALL the columns. This will give you the 2nd row and all the columns. genes[2,] ## EntrezID SYMBOL TXCHROM GeneLength Count ## 2 11634 Aire chr10 1929 15 2.2.2 Subsetting with logicals If you recall from section 1.6, you can make comparisons in R. The result of a comparison is either TRUE or FALSE: 1 &lt; 2 ## [1] TRUE Comparisons are also vectorised: genes$Count &ltor each element in the vector genes$Count, R checks if it is less than 100, then returns either TRUE or FALSE. The output is a vector of logicals. This can be used to subset in R. We will start with our Counts vector: Counts[Counts &lt; 100] ## [1] 15 0 2 2 0 41 22 0 0 3 34 0 9 0 0 1 0 30 1 33 0 2 2 ## [24] 70 2 99 35 0 92 0 20 7 0 1 17 21 1 1 0 0 67 1 0 0 0 0 ## [47] 0 1 0 47 2 2 0 2 0 11 92 0 17 0 0 0 0 0 0 0 0 0 0 ## [70] 30 0 0 0 16 1 2 0 47 0 0 1 0 2 3 22 0 0 0 0 0 0 0 ## [93] 0 0 16 0 1 0 4 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [116] 59 Counts &lt; 100 will return a vector of 200 logicals, which indicate which elements are less than 100. Putting this inside square brackets will subset Counts such that only the elements that are less than 100 (the TRUE’s) remain. This is done similarly in 2 dimensional data structures. The command below selects the rows where the genes$Count column equal to 0. genes[genes$Count == 0,] The code below will output the ROWS where the Count column is equal to 0 and all the COLUMNS (because no input is given after the comma). As there are many rows with a genes$Count of 0, I’ll use the head() function to show just the first 6 rows of the output: head(genes[genes$Count == 0, ]) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 4 12290 Cacna1e chr1 12697 0 ## 8 12647 Chat chr14 2810 0 ## 16 14800 Gria2 chr3 7749 0 ## 17 14843 Gsx2 chr5 1665 0 ## 26 17695 Msmb chr14 522 0 ## 38 19888 Rp1 chr1 9747 0 If you add ! to the start of the genes$Count == 0 condition statement, you will get all the rows where genes$Count is NOT equal to 0. Another way to think about it is that genes$Count == 0 gives you a logical vector of 200 TRUE’s and FALSE’s and ! flips everything such that the TRUE’s become FALSE’s and vice versa. We do this here and print the first 6 rows of the output: head(genes[! genes$Count == 0,]) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 Bmp2 chr2 2515 932 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 ## 7 12565 Cdh9 chr15 2903 2 We can use the $ shortcut to obtain just one column in a dataframe. We can’t do this with matrices - we have to use the [ ] notation instead. For example, we can create a matrix from our genes dataframe. Recall that a matrix can only hold data of ONE data type - thus we will create a dataframe using just the GeneLength and Count columns of the genes dataframe. The first 6 rows are printed out: gene_matrix &lt;- as.matrix(genes[,c(4,5)]) head(gene_matrix) ## GeneLength Count ## [1,] 5681 979 ## [2,] 1929 15 ## [3,] 2515 932 ## [4,] 12697 0 ## [5,] 3099 214 ## [6,] 2632 2 If we wanted just the rows where Count was equal to 0, this is the notation we could use: head( gene_matrix[gene_matrix[,2] == 0, ] ) ## GeneLength Count ## [1,] 12697 0 ## [2,] 2810 0 ## [3,] 7749 0 ## [4,] 1665 0 ## [5,] 522 0 ## [6,] 9747 0 We used the [ ] to specify that we want to use the 2nd column of the matrix, which is the Count column. Like above, the == checks if each element in the Count column is 0. There is nothing entered to the right of the comma, indicating that we want all the columns. Challenge 2.1 Subset the genes dataframe to obtain the rows where the Count is less than or equal to 10 and the columns TXCHROM and Count. The function is.na() checks if each element in a vector is NA: is.na(c(2,5, NA)) ## [1] FALSE FALSE TRUE Use this function to subset the genes dataframe so that all rows where TXCHROM column is NA is removed. Using the dataframe from above subset to get only the rows where the TXCHROM is ‘chr1’ and all columns. Hint: you can refer to section 1.6 to check how to perform different types of comparisons in R. 2.2.3 %in% In the last challenge, we used == to obtain the rows where TXCHROM is ‘chr1’. Another way to perform ‘matching’ tasks is with the %in% function. The following command subsets the rows where TXCHROM is “chr1” or “chr2” and prints out the first 6 rows. head( genes[genes$TXCHROM %in% c(&quot;chr1&quot;, &quot;chr2&quot;),] ) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 3 12156 Bmp2 chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 18 15064 Mr1 chr1 2509 893 ## 19 15112 Hao1 chr2 2029 3 ## 21 15939 Ier5 chr1 3270 32100 Challenge 2.2 There is an important difference between == and %in%. Let’s start by creating a vector of numbers: vect1 &lt;- c(10,10,5,5,8,8) We check which elements in our vector is equal to 5. vect1 == 5 ## [1] FALSE FALSE TRUE TRUE FALSE FALSE The output is what we would expect. What if we wanted check which elements are equal to 5 OR 10? We might try something like this, where put the numbers we are checking for in a vector: vect1 ## [1] 10 10 5 5 8 8 vect1 == c(5,10) ## [1] FALSE TRUE TRUE FALSE FALSE FALSE This isn’t the output we expected. Let’s try the same task with %in%: vect1 %in% c(5,10) ## [1] TRUE TRUE TRUE TRUE FALSE FALSE This output IS what we want. Take a look at the code above and see if you can understand what == does and what %in% does. Hint: The story gets even more interesting if we try to use == to look for four numbers: vect1 == c(5,10,1,3) ## Warning in vect1 == c(5, 10, 1, 3): longer object length is not a multiple ## of shorter object length ## [1] FALSE TRUE FALSE FALSE FALSE FALSE This warning message may seem a bit cryptic. The ‘longer’ object it is referring to is vect1 which has 6 elements. The shorter object it is referring to is c(5,10,1,3), which has 4 elements. Thus, it is saying that 6 is not a multiple of 4. The reason R wants the longer object to be a multiple of the shorter one, is key to understanding what is happening when we use ==. 2.3 Vectorisation R is quite efficient at doing calculations or performing a functions on a vector of data. Let’s use the Count column from our dataframe genes. We can access just one column using the $ symbol: genes$Count ## [1] 979 15 932 0 214 2 2 0 1790 41 1033 ## [12] 700 2075 351 22 0 0 893 3 100 32100 269 ## [23] 34 20005 5751 0 275 9 849 7175 768 358 234 ## [34] 5065 2096 1994 757 0 2310 0 1 0 3091 810 ## [45] 30 816 817 1 580 33 0 941 1445 522 2 ## [56] 2346 572 431 5797 2 70 1236 966 235 2 3009 ## [67] 431 452 2602 3481 99 11857 35 1952 0 706 1317 ## [78] 1130 92 0 871 730 3892 3772 20 7 0 756 ## [89] 1 210 101 17 21 537 1240 930 1 1 0 ## [100] 221 1599 0 67 1 0 315 0 0 739 0 ## [111] 0 976 1 715 18636 289 1396 0 101 285 1665 ## [122] 47 2 4483 2 363 169 135 0 2 0 11 ## [133] 4088 1082 92 0 3888 17 0 0 0 0 0 ## [144] 0 0 0 0 0 2442 30 1610 0 0 0 ## [155] 16 1 2 0 47 0 1118 0 1 0 2 ## [166] 3 22 0 0 0 0 0 0 0 431 0 ## [177] 0 16 0 1 0 4 0 0 1 0 0 ## [188] 0 0 301 0 0 0 0 0 0 0 0 ## [199] 0 59 What do you think will happen if we do this? genes$Count + 10 ## [1] 989 25 942 10 224 12 12 10 1800 51 1043 ## [12] 710 2085 361 32 10 10 903 13 110 32110 279 ## [23] 44 20015 5761 10 285 19 859 7185 778 368 244 ## [34] 5075 2106 2004 767 10 2320 10 11 10 3101 820 ## [45] 40 826 827 11 590 43 10 951 1455 532 12 ## [56] 2356 582 441 5807 12 80 1246 976 245 12 3019 ## [67] 441 462 2612 3491 109 11867 45 1962 10 716 1327 ## [78] 1140 102 10 881 740 3902 3782 30 17 10 766 ## [89] 11 220 111 27 31 547 1250 940 11 11 10 ## [100] 231 1609 10 77 11 10 325 10 10 749 10 ## [111] 10 986 11 725 18646 299 1406 10 111 295 1675 ## [122] 57 12 4493 12 373 179 145 10 12 10 21 ## [133] 4098 1092 102 10 3898 27 10 10 10 10 10 ## [144] 10 10 10 10 10 2452 40 1620 10 10 10 ## [155] 26 11 12 10 57 10 1128 10 11 10 12 ## [166] 13 32 10 10 10 10 10 10 10 441 10 ## [177] 10 26 10 11 10 14 10 10 11 10 10 ## [188] 10 10 311 10 10 10 10 10 10 10 10 ## [199] 10 69 R will perform this calculation on all numbers in the Count column and return a vector. We can add this new vector to our dataframe, as a new column. genes$Count_2 &lt;- genes$Count + 10 There are a few things happening in the above code: The code on the right side of &lt;- is evaluated first. It returns a vector as we saw above. This vector is assigned to a column in genes called Count_2. Since this column does not yet exist in the genes dataframe, a new column called Count_2 is created first. (If there was already a column name Count_2, this command will have overwritten that column with the new vector created in the right side of &lt;-) Note that you could also REPLACE a column using the same notation. For example, if, in the command above, the left side was genes$Count, the old column called Count would be REPLACED with the new vector of numbers created on the right side. Challenge 2.3 Create a new column called Prop_Count that contains each count value as a proportion of the total count value of all 10 genes in the dataframe. E.g. if Count was 10 and total count of all 10 genes is 100, that row in Prop_Count should be 0.1. Hint use the sum() function. 2.4 Functions A function, as the name suggests performs a function. We have already used many functions. For example, the read.delim() function reads in data, the sum() function adds numbers up and the merge() function above merges two dataframes. Formally, when using a function, brackets (( )) are always included after the name of the function. Within the brackets is where input (technically ‘arguments’) to the function goes. You can find out what inputs an argument takes by looking at the help file. For example, let’s take a look at the rnorm() function help file. This function generates a random number from a normal distribution. Figure 2.2: rnorm help file. We can see from the help file that rnorm() takes in 3 arguments: rnorm(n, mean = 0, sd = 1) The help file also tells us what each of these arguments does: n - number of observations. If length(n) &gt; 1, the length is taken to be the number required. mean - vector of means. sd - vector of standard deviations. Challenge 2.4 Take a look at what the rnorm() function outputs in the code below. Try using various different inputs to the function then, try to answer the following questions: What does rnorm() do when you only give it one number to the mean and sd arguments? What happens when you give either argument a vector of numbers? rnorm(4, mean = 10, sd = 1) ## [1] 9.481465 9.972253 11.796336 11.182545 rnorm(3, mean = c(100,0), sd = 1) ## [1] 99.628302 -0.622949 99.685378 Take a look at the following code: rnorm(3,1,10) ## [1] -2.193133 -6.326486 -1.543058 rnorm(10,1,3) ## [1] -0.4552095 -2.6263586 -0.2753075 -1.5723757 1.2919112 5.3792455 ## [7] 3.0016173 2.9871224 0.4301195 0.4948438 rnorm(3, mean = 10, sd = 0) ## [1] 10 10 10 rnorm(sd = 10, mean = 0, n = 3) ## [1] 2.991483 5.785020 14.104628 How does the order of the arguments you input to the function affect the output? How does the order of the arguments you input affect the output, when you name each argument (along with the input)? Note: as the function generates a random number, the numbers you will get from running the function will be different to the ones generated above. 2.5 Homework Subset your genes dataframe to obtain the rows 5 to 10, 45 and 72 and all the columns EXCEPT column 4. Subset your genes dataframe to obtain only rows where genes with the symbol is “Rab18”, “Ripk1” or “Xpr1” and all the columns. Read in the data file “Ses2_homework.tsv” using read.delim(). Create a new column called Prop_GeneLength that contains the Count value as a proportion of GeneLength. E.g. if the count value was 50 and the gene length was 2400, the Prop_GeneLength value for that row would be 0.02083333. Finally, write out this new dataframe as a file called “Ses2_homework_output.tsv”, as a tsv (tab separated values) file. We will use the Bioconductor packages ‘limma’ and ‘edgeR’ in the next session. Install these packages with the following commands: if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(c(&quot;edgeR&quot;, &quot;limma&quot;), version = &quot;3.8&quot;) 2.6 Answers Challenge 2.1 This code obtains rows where Count is less than or equal to 10 and prints the first 6 rows using head(): head(genes[genes$Count &lt;= 10,]) ## EntrezID SYMBOL TXCHROM GeneLength Count Count_2 ## 4 12290 Cacna1e chr1 12697 0 10 ## 6 12563 Cdh6 chr15 2632 2 12 ## 7 12565 Cdh9 chr15 2903 2 12 ## 8 12647 Chat chr14 2810 0 10 ## 16 14800 Gria2 chr3 7749 0 10 ## 17 14843 Gsx2 chr5 1665 0 10 This code removes all rows where the TXCHROM column has a NA value (keeping all columns) and prints the first 6 rows: head(genes[! is.na(genes$TXCHROM),]) ## EntrezID SYMBOL TXCHROM GeneLength Count Count_2 ## 1 11480 Acvr2a chr2 5681 979 989 ## 2 11634 Aire chr10 1929 15 25 ## 3 12156 Bmp2 chr2 2515 932 942 ## 4 12290 Cacna1e chr1 12697 0 10 ## 5 12449 Ccnf chr17 3099 214 224 ## 6 12563 Cdh6 chr15 2632 2 12 First we save the dataframe from the above as a variable called genes_noNA, then we subset to get only the rows where TXCHROM is ‘chr1’. Again we only print the first 6 rows of this output. genes_noNA &lt;- genes[! is.na(genes$TXCHROM),] head(genes_noNA[genes_noNA$TXCHROM == &quot;chr1&quot;,]) ## EntrezID SYMBOL TXCHROM GeneLength Count Count_2 ## 4 12290 Cacna1e chr1 12697 0 10 ## 18 15064 Mr1 chr1 2509 893 903 ## 21 15939 Ier5 chr1 3270 32100 32110 ## 31 18777 Lypla1 chr1 2433 768 778 ## 36 19775 Xpr1 chr1 7651 1994 2004 ## 38 19888 Rp1 chr1 9747 0 10 Challenge 2.2 What == does is compare vect1 with c(5,10) one by one. Since c(5,10) only has two elements, R repeats this shorter vector until it is the same length as the longer vector. This is called ‘recycling’. Thus, the comparisons being made is the top row with each corresponding value in the bottom row, with the result being shown in the third row: 10 10 5 5 8 8 5 10 5 10 5 10 FALSE TRUE TRUE FALSE FALSE FALSE R gives you a warning whenever the length of the shorter vector is NOT a multiple of the longer vector. When there were 4 elements in the shorter vector, it was not repeated a whole number of times - it was repeated 1.5 times. The comparisons being made between vect1 and c(5,10,1,3) are: 10 10 5 5 8 8 5 10 1 3 5 10 FALSE TRUE FALSE FALSE FALSE FALSE %in% simply performs matching and does not take order of the two vectors into consideration. It checks whether the values in vect1 matches either number in c(5,10). It thus gives us the result we expect. Challenge 2.3 The sum() function can be used to calculate the total Count of all 10 rows by giving the genes$Count vector as the input to sum(). genes$Prop_Count &lt;- genes$Count / sum(genes$Count) genes ## EntrezID SYMBOL TXCHROM GeneLength Count Count_2 Prop_Count ## 1 11480 Acvr2a chr2 5681 979 989 4.951672e-03 ## 2 11634 Aire chr10 1929 15 25 7.586831e-05 ## 3 12156 Bmp2 chr2 2515 932 942 4.713951e-03 ## 4 12290 Cacna1e chr1 12697 0 10 0.000000e+00 ## 5 12449 Ccnf chr17 3099 214 224 1.082388e-03 ## 6 12563 Cdh6 chr15 2632 2 12 1.011578e-05 ## 7 12565 Cdh9 chr15 2903 2 12 1.011578e-05 ## 8 12647 Chat chr14 2810 0 10 0.000000e+00 ## 9 12753 Clock chr5 7478 1790 1800 9.053619e-03 ## 10 12801 Cnr1 chr4 5807 41 51 2.073734e-04 ## 11 13177 Eci1 chr17 1091 1033 1043 5.224798e-03 ## 12 13560 E4f1 chr17 2574 700 710 3.540521e-03 ## 13 14000 Drosha chr15 4571 2075 2085 1.049512e-02 ## 14 14370 Fzd8 chr18 3346 351 361 1.775319e-03 ## 15 14658 Glrb chr3 2988 22 32 1.112735e-04 ## 16 14800 Gria2 chr3 7749 0 10 0.000000e+00 ## 17 14843 Gsx2 chr5 1665 0 10 0.000000e+00 ## 18 15064 Mr1 chr1 2509 893 903 4.516694e-03 ## 19 15112 Hao1 chr2 2029 3 13 1.517366e-05 ## 20 15331 Hmgn2 chr4 1254 100 110 5.057888e-04 ## 21 15939 Ier5 chr1 3270 32100 32110 1.623582e-01 ## 22 15944 Irgm1 chr11 2227 269 279 1.360572e-03 ## 23 16542 Kdr chr5 5456 34 44 1.719682e-04 ## 24 16590 Kit chr5 5182 20005 20015 1.011830e-01 ## 25 16796 Lasp1 chr11 3433 5751 5761 2.908791e-02 ## 26 17695 Msmb chr14 522 0 10 0.000000e+00 ## 27 18105 Nqo2 chr13 4045 275 285 1.390919e-03 ## 28 18356 Olfr56 chr11 1930 9 19 4.552099e-05 ## 29 18595 Pdgfra chr5 6737 849 859 4.294147e-03 ## 30 18641 Pfkl chr10 3719 7175 7185 3.629034e-02 ## 31 18777 Lypla1 chr1 2433 768 778 3.884458e-03 ## 32 18795 Plcb1 chr2 7116 358 368 1.810724e-03 ## 33 18798 Plcb4 chr2 3692 234 244 1.183546e-03 ## 34 19330 Rab18 chr18 2257 5065 5075 2.561820e-02 ## 35 19766 Ripk1 chr13 4495 2096 2106 1.060133e-02 ## 36 19775 Xpr1 chr1 7651 1994 2004 1.008543e-02 ## 37 19826 Rnps1 chr17 1923 757 767 3.828821e-03 ## 38 19888 Rp1 chr1 9747 0 10 0.000000e+00 ## 39 20111 Rps6ka1 chr4 3137 2310 2320 1.168372e-02 ## 40 20508 Slc18a3 chr14 2414 0 10 0.000000e+00 ## 41 20671 Sox17 chr1 3130 1 11 5.057888e-06 ## 42 20709 Serpinb9f chr13 1912 0 10 0.000000e+00 ## 43 20719 Serpinb6a chr13 1888 3091 3101 1.563393e-02 ## 44 21399 Tcea1 chr1 2847 810 820 4.096889e-03 ## 45 21822 Tgtp1 chr11 2809 30 40 1.517366e-04 ## 46 21982 Tmem165 chr5 1896 816 826 4.127236e-03 ## 47 22658 Pcgf2 chr11 2836 817 827 4.132294e-03 ## 48 23833 Cd52 chr4 503 1 11 5.057888e-06 ## 49 24018 Rngtt chr4 4153 580 590 2.933575e-03 ## 50 24136 Zeb2 chr2 9113 33 43 1.669103e-04 ## 51 26369 Cetn1 chr18 1051 0 10 0.000000e+00 ## 52 26428 Orc4 chr2 4978 941 951 4.759472e-03 ## 53 26430 Parg chr14 4391 1445 1455 7.308647e-03 ## 54 26446 Psmb3 chr11 731 522 532 2.640217e-03 ## 55 26565 Pla2g10 chr16 1022 2 12 1.011578e-05 ## 56 26932 Ppp2r5e chr12 4810 2346 2356 1.186580e-02 ## 57 27057 Ncoa4 chr14 3577 572 582 2.893112e-03 ## 58 27395 Mrpl15 chr1 4203 431 441 2.179950e-03 ## 59 27410 Abca3 chr17 6453 5797 5807 2.932057e-02 ## 60 28240 Trpm2 chr10 7292 2 12 1.011578e-05 ## 61 50723 Icosl chr10 2748 70 80 3.540521e-04 ## 62 50793 Orc3 chr4 6313 1236 1246 6.251549e-03 ## 63 52837 Tmx4 chr2 5148 966 976 4.885919e-03 ## 64 53600 Timm23 chr14 1162 235 245 1.188604e-03 ## 65 54427 Dnmt3l chr10 1885 2 12 1.011578e-05 ## 66 54635 Pdgfc chr3 3512 3009 3019 1.521918e-02 ## 67 57357 Srd5a3 chr5 1769 431 441 2.179950e-03 ## 68 58175 Rgs20 chr1 2241 452 462 2.286165e-03 ## 69 58244 Stx6 chr1 2459 2602 2612 1.316062e-02 ## 70 65019 Rpl23 chr11 1062 3481 3491 1.760651e-02 ## 71 66598 &lt;NA&gt; &lt;NA&gt; 1611 99 109 5.007309e-04 ## 72 66629 Golph3 chr15 2608 11857 11867 5.997137e-02 ## 73 66705 Dnase1l2 chr17 1236 35 45 1.770261e-04 ## 74 66841 Etfdh chr3 2281 1952 1962 9.872996e-03 ## 75 67085 1700024G13Rik chr14 398 0 10 0.000000e+00 ## 76 67118 Bfar chr16 3003 706 716 3.570869e-03 ## 77 67422 Dhdds chr4 3110 1317 1327 6.661238e-03 ## 78 67480 Cwc25 chr11 3307 1130 1140 5.715413e-03 ## 79 67586 Ubxn11 chr4 1577 92 102 4.653257e-04 ## 80 67652 Spaca1 chr4 1073 0 10 0.000000e+00 ## 81 67738 Ppid chr3 1728 871 881 4.405420e-03 ## 82 67884 1810043G02Rik chr10 1696 730 740 3.692258e-03 ## 83 67974 Ccny chr18 4017 3892 3902 1.968530e-02 ## 84 68070 Pdzd2 chr15 13413 3772 3782 1.907835e-02 ## 85 68659 Fam198b chr3 6627 20 30 1.011578e-04 ## 86 68808 1110046J04Rik chr13 777 7 17 3.540521e-05 ## 87 69405 1700019E08Rik chr2 635 0 10 0.000000e+00 ## 88 70012 Cep85 chr4 3866 756 766 3.823763e-03 ## 89 70100 2310015D24Rik chr16 2917 1 11 5.057888e-06 ## 90 70652 Tmem144 chr3 2292 210 220 1.062156e-03 ## 91 72016 Tedc2 chr17 2145 101 111 5.108466e-04 ## 92 72215 1700001P01Rik chr11 624 17 27 8.598409e-05 ## 93 72338 Wdr89 chr12 2981 21 31 1.062156e-04 ## 94 73723 Sh3bgrl3 chr4 707 537 547 2.716086e-03 ## 95 74108 Parn chr16 2902 1240 1250 6.271781e-03 ## 96 74277 Chic2 chr5 1115 930 940 4.703835e-03 ## 97 74284 1700086L19Rik chr12 1046 1 11 5.057888e-06 ## 98 74934 Armc4 chr18 3477 1 11 5.057888e-06 ## 99 75188 1700009J07Rik chr10 914 0 10 0.000000e+00 ## 100 75627 Snapc1 chr12 2125 221 231 1.117793e-03 ## 101 75739 Mpp7 chr18 5315 1599 1609 8.087562e-03 ## 102 75879 4930589L23Rik &lt;NA&gt; 1364 0 10 0.000000e+00 ## 103 75939 4930579G24Rik chr3 1970 67 77 3.388785e-04 ## 104 76161 Lamp5 chr2 1955 1 11 5.057888e-06 ## 105 76684 Pla2g10os chr16 331 0 10 0.000000e+00 ## 106 77877 6030458C11Rik chr15 5474 315 325 1.593235e-03 ## 107 78112 4930452N14Rik chr1 613 0 10 0.000000e+00 ## 108 78805 4930545L23Rik chr2 2502 0 10 0.000000e+00 ## 109 80837 Rhoj chr12 2358 739 749 3.737779e-03 ## 110 83557 Lin28a chr4 3480 0 10 0.000000e+00 ## 111 93806 Serpinb9g chr13 1925 0 10 0.000000e+00 ## 112 94089 Trim7 chr11 1366 976 986 4.936498e-03 ## 113 97848 Serpinb6c chr13 1328 1 11 5.057888e-06 ## 114 108083 Pip4k2b chr11 5053 715 725 3.616390e-03 ## 115 108767 Pnrc1 chr4 1925 18636 18646 9.425879e-02 ## 116 109093 Rars2 chr4 1867 289 299 1.461729e-03 ## 117 109241 Mbd5 chr2 7055 1396 1406 7.060811e-03 ## 118 207678 &lt;NA&gt; &lt;NA&gt; 1877 0 10 0.000000e+00 ## 119 207792 BC034090 &lt;NA&gt; 4611 101 111 5.108466e-04 ## 120 210719 Mkx chr18 3201 285 295 1.441498e-03 ## 121 211007 Trim41 chr11 3470 1665 1675 8.421383e-03 ## 122 217149 Cisd3 chr11 742 47 57 2.377207e-04 ## 123 217674 Gphb5 chr12 1614 2 12 1.011578e-05 ## 124 225131 Wac chr18 5441 4483 4493 2.267451e-02 ## 125 225152 Gjd4 chr18 2661 2 12 1.011578e-05 ## 126 227835 Gtdc1 chr2 2554 363 373 1.836013e-03 ## 127 230806 Crybg2 chr4 4761 169 179 8.547830e-04 ## 128 237387 Lrrc3 chr10 4296 135 145 6.828148e-04 ## 129 238266 Syt16 chr12 2705 0 10 0.000000e+00 ## 130 238271 Kcnh5 chr12 4061 2 12 1.011578e-05 ## 131 238568 Serpinb6d chr13 1467 0 10 0.000000e+00 ## 132 239017 Ogdhl chr14 3449 11 21 5.563676e-05 ## 133 239719 Mkl2 chr16 8997 4088 4098 2.067664e-02 ## 134 241639 Fermt1 chr2 5255 1082 1092 5.472634e-03 ## 135 242377 Pm20d2 chr4 5578 92 102 4.653257e-04 ## 136 245240 9930111J21Rik2 chr11 2403 0 10 0.000000e+00 ## 137 246198 Mllt6 chr11 7271 3888 3898 1.966507e-02 ## 138 252974 Tspear chr10 2163 17 27 8.598409e-05 ## 139 258097 Olfr1500 chr19 936 0 10 0.000000e+00 ## 140 258151 Olfr1505 chr19 951 0 10 0.000000e+00 ## 141 258341 Olfr1495 chr19 960 0 10 0.000000e+00 ## 142 258626 Olfr1501 chr19 948 0 10 0.000000e+00 ## [ reached getOption(&quot;max.print&quot;) -- omitted 58 rows ] Challenge 2.4 If you provide rnorm() with a vector of inputs to either the mean or sd argument, it will use each element in that vector for successive random numbers generated and recycle the vector if it is shorter than the number of random numbers required. Thus, the following code: rnorm(3, mean = c(100,0), sd = 1) will generate 3 random numbers from the following normal distributions, in order: 1. mean of 100 and sd of 1 2. mean of 0 and sd of 1 3. mean of 100 and sd of 1 If you do not provide the name of the argument, rnorm() will use the first number provided as the argument to n, the second number provided as the input to mean and the third number provided as the input to sd. Thus, rnorm(3,1,10) generates 3 random numbers from a normal distribution with a mean of 1 and a standard deviation of 10 and rnorm(3,10,1) will generate 3 random numbers from a normal distribution with a mean of 10 and a standard deviation of 1. If you give the argument name with the input, it does not matter what order you provide the inputs. "],
["session-3.html", "Chapter 3 Session 3 3.1 Lists 3.2 Classes 3.3 Packages 3.4 DGEList 3.5 Homework 3.6 Answers", " Chapter 3 Session 3 In this session we will learn: lists, another data structure S4 objects the DGEList object from the package limma 3.1 Lists Recall that we have previously learnt about the data structures: vectors, matrices and dataframes. Another important data structure is the list. Like a vector, it is 1 dimensional i.e. one row of data. Unlike vectors, you can put several data types in a list. Here, our list includes data of the integer, a character and a double types: list(1, &quot;a&quot;, 1.5) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] 1.5 Not only can you put different data types into a list, you can also put a WHOLE data structure into one element of a list. In the list below, the first element is a vector that contains 3 numbers, the second element is a character and the third element is a dataframe that has two columns. list(c(1,2,3), c(&quot;words&quot;, &quot;letters&quot;), data.frame(column1 = c(1,2,3), column2 = c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)) ) ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;words&quot; &quot;letters&quot; ## ## [[3]] ## column1 column2 ## 1 1 a ## 2 2 b ## 3 3 c The output can often help you understand how the list is structured. The double brackets (e.g. [[1]]) signifies an element of the list and which index it is at. Here there are three elements in our list so the numbers in the double square brackets go from 1 to 3. Underneath the [[1]] and [[2]], there is a [1] - this indicates that the first and second elements both contain a vector. Underneath [[3]] you see the standard output for a dataframe, which we have seen before. You even include a list within a list (within a list, within a list….I call this ‘list - ception’). This is where it starts to get confusing. list(1, list(1,&quot;a&quot;)) ## [[1]] ## [1] 1 ## ## [[2]] ## [[2]][[1]] ## [1] 1 ## ## [[2]][[2]] ## [1] &quot;a&quot; The first element, indicated by [[1]], is a vector, indicated by the [1] underneath. The second element, indicated by the first [[2]] contains a list: [[2]][[1]] - tells you that the second element is a list, of which the first element of the inner list is the number 1. [[2]][[2]] - tells you that the second element is a list, of which the second element of the inner list is “a”. Many bioconductor packages, including limma, use lists so it is an important data structure to understand. Challenge 3.1 Below is the output from a list. How many element of the list are there? Look carefully at each element and answer the following questions about EVERY element of the list: How many elements does the element of the list contain? If there are several elements within this element, what does each element contain? ## [[1]] ## [[1]][[1]] ## [1] 1 2 ## ## [[1]][[2]] ## [1] &quot;b&quot; ## ## ## [[2]] ## [1] &quot;a&quot; &quot;b&quot; ## ## [[3]] ## [[3]][[1]] ## [[3]][[1]][[1]] ## [1] &quot;a&quot; ## ## [[3]][[1]][[2]] ## [1] 1 ## ## ## [[3]][[2]] ## [1] &quot;b&quot; ## ## ## [[4]] ## [1] &quot;end&quot; We can access elements of a list using square brackets. You may have noticed that there are often double square brackets [[ ]]. There is a subtle but important difference between single square brackets and double square brackets when subsetting lists. Let’s make a list: my_list &lt;- list( c(&quot;a&quot;,&quot;b&quot;), c(1,2,3), c(4,5,6) ) Take a look at the output of obtaining the first element with single square brackets and double square brackets: my_list[1] ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; The difference is minor; with my_list[1] there is an extra [[1]] at the top, with my_list[[1]] there is no [[1]] at the top. The str() function gives us some more information: str(my_list[1]) ## List of 1 ## $ : chr [1:2] &quot;a&quot; &quot;b&quot; str(my_list[[1]]) ## chr [1:2] &quot;a&quot; &quot;b&quot; This tells us that when you use single brackets, the output is a list containing one element, which is a vector. When you use double brackets, the output is just a vector, NOT contained within a list. Let’s use an analogy to gain a better understanding of this concept. Below is a picture of a cargo train, which contains a box in each segment. This represents a list containing 3 elements, with each element being the box. Figure 3.1: Cargo train representation of a list. Using a single bracket returns you the train segment with the box inside. Figure 3.2: Single brackets with our cargo train list. Using double brackets returns you just the box inside. Figure 3.3: Double brackets with our cargo train list. Back to our list: my_list ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; ## ## [[2]] ## [1] 1 2 3 ## ## [[3]] ## [1] 4 5 6 To obtain the first element of the vector contained within the first element of the list (the &quot;a&quot;) you can use: my_list[[1]][1] ## [1] &quot;a&quot; The [[1]] gives you just the vector contained within the first element of the list: my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; The second square bracket [1] then gives you the first element of the vector: my_list[[1]][1] ## [1] &quot;a&quot; Challenge 3.2 First create a new list: my_list2 &lt;- list( c(&quot;a&quot;,&quot;b&quot;), c(1,2,3), data.frame(Name = c(&quot;Sally&quot;, &quot;Andy&quot;), Age = c(40,32)) ) my_list2 ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; ## ## [[2]] ## [1] 1 2 3 ## ## [[3]] ## Name Age ## 1 Sally 40 ## 2 Andy 32 Subset this list to obtain a data structure that gives the following outputs: ## [1] &quot;a&quot; &quot;b&quot; ## [1] &quot;b&quot; ## [[1]] ## [1] 1 2 3 ## [1] 40 ## Name Age ## 1 Sally 40 ## [[1]] ## Name Age ## 1 Sally 40 ## 2 Andy 32 3.1.1 Named list You can also have names for each element of your list: named_list &lt;- list( name = c(&quot;Andy&quot;, &quot;Sally&quot;), age = c(32,40) ) named_list ## $name ## [1] &quot;Andy&quot; &quot;Sally&quot; ## ## $age ## [1] 32 40 If your list is named, you can use $ to access each element of your list: named_list$name ## [1] &quot;Andy&quot; &quot;Sally&quot; Note that the output is just the vector, NOT a vector within a list. Thus named_list[[1]] does the same thing as named_list$name. Recall that we access columns in dataframes with the $ symbol as well. This means that if you have a dataframe within a list, you can obtain a column within the dataframe that is within the list using two $’s: Let’s start with a list that contains a dataframe as its first element named_list2 &lt;- list( details = data.frame(name = c(&quot;Andy&quot;, &quot;Sally&quot;), age = c(32,40)) ) named_list2 ## $details ## name age ## 1 Andy 32 ## 2 Sally 40 We can get the age column using: named_list2$details$age ## [1] 32 40 Extra:The reason you can also access columns in a dataframe with $ is because ‘under the hood’ a dataframe is actually a list. It is a list with the constraint that each element is a vector of the same length. Each element in the list is thus a column in the ‘dataframe’. Challenge 3.3 Take a look at the named list below: named_list3 &lt;- list( cats = data.frame(name = c(&quot;Garfield&quot;, &quot;Hello Kitty&quot;), age = c(3,10), stringsAsFactors = FALSE), dogs = data.frame(name = c(&quot;Spot&quot;, &quot;Snoopy&quot;), age = c(5,14), stringsAsFactors = FALSE) ) named_list3 ## $cats ## name age ## 1 Garfield 3 ## 2 Hello Kitty 10 ## ## $dogs ## name age ## 1 Spot 5 ## 2 Snoopy 14 Using just $, obtain: the vector of cat names the dog dataframe the vector of dog ages 3.2 Classes Everything in R is an ‘object’ - every function that we have used and every data structure we have created in R. Each object falls under a ‘class’. A class defines a type of object and what properties it has. For example, every list created with list() is an object that falls under the class ‘list’. The ‘list’ class describes how ‘list’ objects behave. To find out what class an object falls under, use the function class(): class(list(1, 2, &quot;a&quot;)) ## [1] &quot;list&quot; class(list(&quot;a&quot;, &quot;b&quot;, 4)) ## [1] &quot;list&quot; Bioconductor packages often use special classes. For example, the limma package uses the DGEList class. This is a class that is specifically designed for storing read count data from RNA sequencing. It is a special ‘list’ that must contain two components: counts - which must be a numeric matrix, that stores counts. Each row must be a gene and each column must be a sample. samples - which must be a dataframe, that contains information about each sample. Each row must be a sample and must contain information about the group (e.g. treatment group) the sample belongs to, the library size of that sample and the normalisation factor for that sample. There are also a number of optional components of the DGEList class, such as a dataframe containing gene annotation information. 3.3 Packages Last session we installed the packages limma and edgeR. This downloads the files for each package and saves them to your computer. You generally only need to do this once. To use a package you must ‘load’ them EACH time you start a new R session. You do this with the library() function. Let’s load both limma and edgeR: library(edgeR) ## Loading required package: limma library(limma) 3.4 DGEList The RNA sequencing analysis you will be guided through is a simplified version of that performed in the article from Law et al. (Law et al. 2016). The RNA sequencing data we will use is from Sheridan et al. (Sheridan et al. 2015). It consists of samples from 3 cell populations; basal, luminal progenitor (LP) and mature luminal (ML), which has been sorted from the mammary glands of female virgin mice. The reads have been aligned to the mouse reference genome (mm10) and reads summarised at the gene-level (using mm10 RefSeq-based annotation) to obtain gene counts. Gene level summarisation involves counting the number of reads mapped to each gene - the resulting ‘count of reads’ is often referred to simply as ‘counts’. We are going to start our RNA-seq analysis with gene counts. The data files for this session should have been emailed to you (though you can also obtain them from Github). Please uncompress (extract) the files and put them in your working directory. Each data file details the number of reads mapped to a gene for 1 sample. There is 1 data file for each sample. Within each data file, there are 3 columns - ‘EntrezID’, ‘GeneLength’ and ‘Count.’ We will be looking at 9 samples (and using 9 data files) in total. Their details are shown below: Table 3.1: Summary of samples. File name Sample name Phenotype group GSM1545535_10_6_5_11.txt 10_6_5_11 LP GSM1545536_9_6_5_11.txt 9_6_5_11 ML GSM1545538_purep53.txt purep53 Basal GSM1545539_JMS8-2.txt JMS8-2 Basal GSM1545540_JMS8-3.txt JMS8-3 ML GSM1545541_JMS8-4.txt JMS8-4 LP GSM1545542_JMS8-5.txt JMS8-5 Basal GSM1545544_JMS9-P7c.txt JMS9-P7c ML GSM1545545_JMS9-P8c.txt JMS9-P8c LP To create a DGEList class object (or simply ‘DGEList object’), we will use the readDGE() function. There are three important arguments to this function: files - a vector of data file names path - the path to the directory that contains your data files. If the data files are in your working directory, don’t worry about this argument. If the data files are somewhere else, like a folder called ‘data’, in your working directory you must give the path to that folder colums - the columns of the input files which have the gene names and counts respectively (as the column indices) First, we will create a vector of the file names. You can simply copy and paste this code into your R script. files &lt;- c(&quot;GSM1545535_10_6_5_11.txt&quot;, &quot;GSM1545536_9_6_5_11.txt&quot;, &quot;GSM1545538_purep53.txt&quot;, &quot;GSM1545539_JMS8-2.txt&quot;, &quot;GSM1545540_JMS8-3.txt&quot;, &quot;GSM1545541_JMS8-4.txt&quot;, &quot;GSM1545542_JMS8-5.txt&quot;, &quot;GSM1545544_JMS9-P7c.txt&quot;, &quot;GSM1545545_JMS9-P8c.txt&quot;) Next, we will create our DGEList object. I have put my data files in a folder called “data” (within my working directory). Thus, I must specify path = &quot;data&quot;. Depending on where you have put your data files, you may need a different input to path or not have to include the path argument. x &lt;- readDGE(files, path = &quot;data&quot;, columns = c(1,3)) The object we created has 2 elements, one named samples and one named counts. Let’s take a look at each: head(x$counts) ## Samples ## Tags GSM1545535_10_6_5_11 GSM1545536_9_6_5_11 GSM1545538_purep53 ## 497097 1 2 342 ## 100503874 0 0 5 ## 100038431 0 0 0 ## 19888 0 1 0 ## 20671 1 1 76 ## 27395 431 771 1368 ## Samples ## Tags GSM1545539_JMS8-2 GSM1545540_JMS8-3 GSM1545541_JMS8-4 ## 497097 526 3 3 ## 100503874 6 0 0 ## 100038431 0 0 0 ## 19888 0 17 2 ## 20671 40 33 14 ## 27395 1268 1564 769 ## Samples ## Tags GSM1545542_JMS8-5 GSM1545544_JMS9-P7c GSM1545545_JMS9-P8c ## 497097 535 2 0 ## 100503874 5 0 0 ## 100038431 1 0 0 ## 19888 0 1 0 ## 20671 98 18 8 ## 27395 818 468 342 Recall that DGEList specifies that the counts element of the list must be a numeric matrix, that stores the counts. Each row must be a gene and each column must be a sample. Note that the column names are the file names and the rownames are the EntrezID’s. head(x$samples) ## files group lib.size norm.factors ## GSM1545535_10_6_5_11 GSM1545535_10_6_5_11.txt 1 32863052 1 ## GSM1545536_9_6_5_11 GSM1545536_9_6_5_11.txt 1 35335491 1 ## GSM1545538_purep53 GSM1545538_purep53.txt 1 57160817 1 ## GSM1545539_JMS8-2 GSM1545539_JMS8-2.txt 1 51368625 1 ## GSM1545540_JMS8-3 GSM1545540_JMS8-3.txt 1 75795034 1 ## GSM1545541_JMS8-4 GSM1545541_JMS8-4.txt 1 60517657 1 This is a dataframe where each row is 1 sample, and details of each sample is given in the 4 columns. files gives the file names. group details the phenotype group the sample belongs to. As we have not specified this yet, the default 1 is given for each sample. lib.size gives the library size. This is the total sum of all counts for that sample. norm.factors this gives the normalisation factor for each sample. As we have not calculated any normalisation factors, this is 1 for each sample. This dataframe also has rownames, which are currently the file names of each sample. Let’s change them to be the sample names (see Table 3.1). We can do this by first creating a vector of sample names. You can simply copy and paste the code below into your R script. samplenames &lt;- c(&quot;10_6_5_11&quot;, &quot;9_6_5_11&quot;, &quot;purep53&quot;, &quot;JMS8-2&quot;, &quot;JMS8-3&quot;, &quot;JMS8-4&quot;, &quot;JMS8-5&quot;, &quot;JMS9-P7c&quot;, &quot;JMS9-P8c&quot;) We can change the rownames in the samples dataframe using the rownames() function. This function will give you the row names of a data structure (a dataframe in this instance): rownames(x$samples) ## [1] &quot;GSM1545535_10_6_5_11&quot; &quot;GSM1545536_9_6_5_11&quot; &quot;GSM1545538_purep53&quot; ## [4] &quot;GSM1545539_JMS8-2&quot; &quot;GSM1545540_JMS8-3&quot; &quot;GSM1545541_JMS8-4&quot; ## [7] &quot;GSM1545542_JMS8-5&quot; &quot;GSM1545544_JMS9-P7c&quot; &quot;GSM1545545_JMS9-P8c&quot; We can see that the row names are the file names as we saw above. To replace these file names with the sample names we can run: rownames(x$samples) &lt;- samplenames We have seen this type of notation before in session 1 (section 2.3). This code assigns the samplenames vector as the row names of the samples dataframe. Challenge 3.4 Use the colnames() function to replace the column names of the count matrix from being file names to sample names. The code below creates a factor vector (called group) that specifies the phenotype group each sample belongs to. It is ordered such that the first element in the vector corresponds to the first row of the samples dataframe. group &lt;- as.factor(c(&quot;LP&quot;, &quot;ML&quot;, &quot;Basal&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;)) Replace the group column of the samples dataframe with the group factor vector. Hint: you will need to use the list subsetting notation we learnt at the start of this session. Additional gene annotation information about the genes from our RNA-seq data can be found in the file “Ses3_geneAnnot.tsv”. Read this file in and add it as another element named genes in x (our DGEList object). Hint: the command for adding an element to a list is similar to the command for adding a column to a dataframe. Take a look at Section 2.3 to review how to do the latter. 3.5 Homework Subset the first column of the count matrix from x (our DGEList object) and ‘save’ (assign) it to a variable called sample1. Find out how many genes had a count of ‘0’. Find the total sum of all counts for that sample. Compare this number with the corresponding (first) number in the lib.size column from the samples dataframe. Is it the same? Calculate the total sum of the library sizes, using the lib.size column from the samples dataframe from x (our DGEList object). Using the genes dataframe from x (our DGEList object), find out how many genes are from chromosome 5. Hint: you will need to remove rows where the TXCHROM column is NA. Revisit section 2.1 to review missing values. 3.6 Answers Challenge 3.1 There are 4 elements of this list. For each element - Within the first element, there are 2 elements. The first is a vector containing 2 numbers and the second is a vector containing one character type (note there are no ‘scalars’ in R, thus &quot;a&quot; is a vector with 1 element). The second element contains 1 element. It is a vector containing two character types. The third element contains 2 elements. Within the first element is another list. Within this list there are 2 elements, both being character types. The second element of this nested list is a vector containing one character type. The fourth element is a vector containing one character type. Challenge 3.2 my_list2[[1]] ## [1] &quot;a&quot; &quot;b&quot; my_list2[[1]][2] ## [1] &quot;b&quot; my_list2[2] ## [[1]] ## [1] 1 2 3 my_list2[[3]][1,2] ## [1] 40 my_list2[[3]][1,] ## Name Age ## 1 Sally 40 my_list2[3] ## [[1]] ## Name Age ## 1 Sally 40 ## 2 Andy 32 Challenge 3.3 # 1. the vector of cat names named_list3$cats$name ## [1] &quot;Garfield&quot; &quot;Hello Kitty&quot; # 2. the dog dataframe named_list3$dogs ## name age ## 1 Spot 5 ## 2 Snoopy 14 # 3. the vector of dog ages named_list3$dogs$age ## [1] 5 14 Challenge 3.4 # 1 colnames(x$counts) &lt;- samplenames # 2 x$samples$group &lt;- group # 3 geneAnnot &lt;- read.delim(&quot;data/Ses3_geneAnnot.tsv&quot;, stringsAsFactors = FALSE) x$genes &lt;- geneAnnot References "],
["session-4.html", "Chapter 4 Session 4 4.1 Filtering 4.2 Normalisation 4.3 MDS 4.4 Saving plots 4.5 Linear modelling 4.6 Statistical testing 4.7 Answers", " Chapter 4 Session 4 In this session we will run through the basic steps for analysing a simply RNA-seq experiment using the limma-voom workflow. This includes: filtering out lowly expressed genes normalisation creating a multidimensional scaling (MDS) plot creating a design matrix fitting gene-wise linear models (with empirical Bayes moderation to more accurately estimate gene-wise variability) performing statistical testing for differential expression The aim of this session is to give you a basic understanding and intuition about each of the basic RNA-seq analysis steps. It does NOT intend to teach you statistics. 4.1 Filtering Let’s start by re-creating our DGEList object: # load required packages library(edgeR) library(limma) # vector of file names files &lt;- c(&quot;GSM1545535_10_6_5_11.txt&quot;, &quot;GSM1545536_9_6_5_11.txt&quot;, &quot;GSM1545538_purep53.txt&quot;, &quot;GSM1545539_JMS8-2.txt&quot;, &quot;GSM1545540_JMS8-3.txt&quot;, &quot;GSM1545541_JMS8-4.txt&quot;, &quot;GSM1545542_JMS8-5.txt&quot;, &quot;GSM1545544_JMS9-P7c.txt&quot;, &quot;GSM1545545_JMS9-P8c.txt&quot;) # creage DGEList object x &lt;- readDGE(files, path = &quot;data&quot;, columns = c(1,3)) # add sample names samplenames &lt;- c(&quot;10_6_5_11&quot;, &quot;9_6_5_11&quot;, &quot;purep53&quot;, &quot;JMS8-2&quot;, &quot;JMS8-3&quot;, &quot;JMS8-4&quot;, &quot;JMS8-5&quot;, &quot;JMS9-P7c&quot;, &quot;JMS9-P8c&quot;) rownames(x$samples) &lt;- samplenames colnames(x$counts) &lt;- samplenames # add phenotype group information group &lt;- as.factor(c(&quot;LP&quot;, &quot;ML&quot;, &quot;Basal&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;)) x$samples$group &lt;- group # add gene annotation information geneAnnot &lt;- read.delim(&quot;data/Ses3_geneAnnot.tsv&quot;, stringsAsFactors = FALSE) x$genes &lt;- geneAnnot The first step is to filter out lowly expressed genes. There are two main problems with low abundant genes: Technical variation is more problematic for low abundance genes. This variation is thought to be due to two factors; insufficient mixing and low sampling fraction (McIntyre et al. 2011). Insufficient mixing of solutions during library preparation can result in uneven distribution of reads. RNA sequencing can be thought of as sampling. You start with many, many RNA molecules. You sample from this ‘population’ of RNAs by sequencing a small proportion of the RNA molecules you started out with. Your sample consists of the RNA molecules that were sequenced. This is generally a very small proportion of the total ‘population’ of RNAs you started with. For example, if you start with 100ng of mRNA and sequence ~300 million reads, you only sequence 0.0013% of the mRNA that you started with (McIntyre et al. 2011). It is difficult to obtain accurate measures of the true abundance of each RNA species when you only sample such a small proportion of the total ‘population’ of mRNAs. Measurement errors will occur simply due to the random nature of the sampling process. This problem affects lowly abundant RNA species more because the proportion of the error relative to the (small) count value for that RNA species, is larger (than it would be for more highly abundant RNA species). Biologically, genes that are expressed at low, biologically not meaningful, levels are not of interest. Additionally, genes that have a count of 0 across ALL samples are also removed, simply because they provide no useful information. Removing these highly variable, lowly expressed genes increases your ‘power’ to detect differentially expressed genes (Bourgon, Gentleman, and Huber 2010). To test for differential expression, a statistical test must be conducted for every gene. There are a large number of genes - meaning that a large number of statistical tests must be performed. When you perform many statistical tests, many will produce small p-values by chance alone. We must account for these false positives. There are a number of methods to do this and these are broadly called ‘adjusting for multiple testing’. This adjustment reduces the about of false positives but comes at the cost of reduced ‘power’ to detect true positives. If we filter out uninteresting, lowly expressed genes, we need to perform fewer statistical tests and reduce the impact that multiple testing adjustment has on detection power. The filterByExpr() function provides an automatic way to filter genes. By default, it keeps genes with a count of 10 or more in a minimum number of samples. This minimum number of samples is the smallest phenotype group. In our experiment, there are 3 phenotype groups each with 3 samples. Filtering is therefore performed such that genes with a count of 10 in at least 3 samples are kept and the rest filtered. Note that the actual filtering is done using counts per million (NOT the raw count value). This is to prevent bias against samples with small library sizes. The output of this function is a vector of logicals, indicating which rows (genes) should be kept and which filtered. keep &lt;- filterByExpr(x, group = group) head(keep) ## 497097 100503874 100038431 19888 20671 27395 ## TRUE FALSE FALSE FALSE TRUE TRUE x &lt;- x[keep,, keep.lib.sizes=FALSE] str(x$counts) ## num [1:16624, 1:9] 1 1 431 768 810 ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ Tags : chr [1:16624] &quot;497097&quot; &quot;20671&quot; &quot;27395&quot; &quot;18777&quot; ... ## ..$ Samples: chr [1:9] &quot;10_6_5_11&quot; &quot;9_6_5_11&quot; &quot;purep53&quot; &quot;JMS8-2&quot; ... We can see that we now have 16624 genes. We started with 27179 genes - meaning that ~40% of genes have been filtered out. 4.2 Normalisation The aim of normalisation is to remove systematic technical effects. There are two main factors that need to be normalised for in RNA-seq: Sequencing depth/library size - technically, sequencing a sample to half the depth will give, on average, half the number of reads mapping to each gene (Robinson and Oshlack 2010). RNA composition - if a large number of genes are unique to, or highly expressed, in one experimental condition, the sequencing ‘read estate’ available for the remaining genes in that sample is decreased. For example, let’s say we have 2 samples, A and B. Both contain the same set of genes which are also expressed at the same level. In sample A however, there are also many genes that are not expressed in sample B. Each sample is sequenced to the same depth. The genes that are present and actually expressed equally in the two samples will have fewer sequencing reads in sample A. This is because the genes present in sample A but NOT present in sample B are taking up a portion of the sequencing ‘real estate’. As a result there is less reads ‘available’ to the other genes (the ones present in both samples). This means that the ’proportion o reads attributed to a given gene in a library depends on the expression properties of the whole sample rather than just the expression of that gene (Robinson and Oshlack 2010). Sequencing depth is accounted for by calculating the counts per million (cpm). This metric is calculated by: taking the library size (sum of all counts for a sample), dividing this by 1,000,000 to get the ‘per million’ scaling factor, then dividing all read counts for each gene in that sample by the ‘per million’ scaling factor RNA composition can be accounted for by using more sophisticated normalisation methodologies. We will use ‘trimmed mean of M-values’ (TMM), which estimates relative RNA levels from RNA-seq data (Robinson and Oshlack 2010). TMM calculates a library size scaling factor for each library (sample). This is done using the following steps: calculate the gene expression log fold changes and absolute expression values for pair-wise samples (selecting one sample from the experiment as a reference) remove the genes with the highest and lowest fold changes and absolute expression values take a weighted mean of the remaining genes (where the weight is the inverse of the approximate asymptotic variances). This gives the normalisation factor for each library (sample) TMM, like most normalisation methods, assumes that the majority of genes are NOT differentially expressed. Subsequent steps in this analysis will use log-cpm values, calculated using the normalisation factors, which ‘scale’ each library size. We can calculate the normalisation factors, specifying that we want to use the &quot;TMM&quot; method: x &lt;- calcNormFactors(x, method = &quot;TMM&quot;) This function calculates the normalisation factors for each library (sample) and puts this information in the samples dataframe. Note that it takes x (our DGEList object as input) and returns a DGEList object as well. Let’s take a look at our normalisation factors: x$samples$norm.factors ## [1] 0.8943956 1.0250186 1.0459005 1.0458455 1.0162707 0.9217132 0.9961959 ## [8] 1.0861026 0.9839203 These normalisation factors are all close to 1 for all samples, suggesting minimal difference in ‘relative RNA levels’ between samples. 4.3 MDS MDS is a way to visualise distances between sets of objects (samples in our case). It is also a dimension reduction technique, like principal components analysis (PCA). Given a matrix of distances between each pair of objects (samples in our case), it tries to place each object in a lower dimensional space (usually 2 dimensions, so a scatter plot can be created) such that the distances between each object (sample) is preserved as well as possible. Note on dimension reduction: Dimension reduction describes the process of converting a data with many dimensions (which can be thought of as ‘variables’) into data with fewer dimensions, while retaining as much information as possible. There are a number of reasons why we may want to do this. In RNA-seq experiments specifically, the main advantage of dimension reduction is to allow visualisation and exploration your data. Take for example, a gene expression experiment where the expression level of only 2 genes are measured in a number of samples. We can easily visualise this by plotting a scatter graph where gene 1 expression is on the y axis and gene 2 expression is on the x axis (or vice versa) and each point is a sample. In RNA-seq experiments however, we generally measure the expression of over 10,000 genes. It would be impossible to visualise such data as we would need to have over 10,000 axes (as we have over 10,000 genes) in our graph. What we would like to do, is to transform the high-dimensional data into data with with only 2 or 3 dimensions that conveys the same information. We could then visualise the data on a plot with 2 or 3 axes. Information is inevitably lost during the dimension reduction process, though all methodologies aim to preserve as much information as possible. The plotMDS() function performs MDS on a DGEList object using metric MDS. The distances between each point (sample) in the resulting plot can be interpreted as the typical log2-fold-change between the samples, for the most different genes (genes that have the most different expression values between that pair of samples). Let’s take a look at the plot created from x, our DGEList object: plotMDS(x) Each point on the plot represents one sample and is ‘labelled’ using the sample name. We can change the labeling to use the name of the group the sample belongs to instead. Recall group is a vector that, specifies the phenotype group of each sample (in the order the samples are in within x): group ## [1] LP ML Basal Basal ML LP Basal ML LP ## Levels: Basal LP ML To change the labels we can simply use: plotMDS(x, labels = group) This shows us that the phenotype groups tend to ‘cluster’ together, meaning that the gene expression profiles are similar for samples within a phenotype group. The ‘Basal’ type samples quite close together while the ‘LP’ (luminal progenitor) and ‘ML’ (mature luminal) type samples are further apart, signifying that their expression profiles are more variable. To make the three phenotype groups more distinct in our graph, we are going to colour samples from each group differently. To do this, we will use the col argument in plotMDS(). col takes in a vector the same length as the number of points in the plot (9 in our case, as there are 9 samples). Each element of the vector should be a colour name (R understands over 600 colour names), indicating what colour that sample should be. To make this more clear, take a look at the table below, which lists all the samples and the phenotype group they belong to: Samples Group 10_6_5_11 LP 9_6_5_11 ML purep53 Basal JMS8-2 Basal JMS8-3 ML JMS8-4 LP JMS8-5 Basal JMS9-P7c ML JMS9-P8c LP For example, let’s say we wanted LP samples to be coloured green, ML samples to be coloured red and Basal samples to be coloured blue. The col argument would then require a vector that looks like this: ## [1] &quot;green&quot; &quot;red&quot; &quot;blue&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; Of course, we don’t want to type out this vector ourselves. We want to make R do this. This is less tedious and error prone. We can do this using the group vector. Recall this factor vector gives the phenotype groups of each sample (in the same order as the samples are in within x, our DGEList object). group ## [1] LP ML Basal Basal ML LP Basal ML LP ## Levels: Basal LP ML We don’t want to change this vector, so we will ‘copy’ the vector group to a new variable called groupCol: groupCol &lt;- group We can now create our character vector. I will guide you through this in the next challenge. Challenge 4.1 The levels function gives all the ‘categories’ of a factor vector. If we run it on groupCol, it will give our 3 phenotypes: levels(groupCol) ## [1] &quot;Basal&quot; &quot;LP&quot; &quot;ML&quot; Replace the current levels (categories) of groupCol with a character vector containing 3 colour names of your choosing. Inspect the resulting groupCol vector to make sure it has done what you expected it to. Hint: the notation for this is similar to creating and replacing a new column - see Section 2.3 for details. We need to give the argument col a character vector of colour names, NOT a factor vector. Convert groupCol from a factor vector to a character vector. Inspect the resulting groupCol vector to make sure it has done what you expected it to. Hint: see section 1.10.1 to review the commands to convert between data types. Use plotMDS() and the col argument to re-plot the MDS plot with phenotype colours. 4.3.1 Plotting There are two phases to making plots with base R: ‘Initialising’ a new plot, e.g. done with a ‘plot’ function like plot() or plotMDS. Adding to an existing plot, e.g. adding a legend. We will explore adding base R plot annotation in the following challenge. Challenge 4.2 Re-create the MDS plot with the sample names as labels and the labels coloured by phenotype group - i.e. the plot below: Add a title to your graph using the main argument to the plotMDS() function. Remember to give your title as a character. Notice that the label of sample ‘9_6_5_11’ is cut off. Amend this by changing the ‘limits’ of the x axis using the xlim argument to the plotMDS() function. xlim takes a numeric vector containing 2 elements, the min and max values of the x axis. Add a legend to your plot using the legend() function. This function adds to an existing plot and thus should be run after the plotMDS() function. Useful arguments to legend() include: x - the position of the legend. It can be one of: “bottomright”, “bottom”, “bottomleft”, “left”, “topleft”, “top”, “topright”, “right” or “center”. (technically you could also specify the position of the legend using x and y coordinates but we will not do this in the course) legend - a character vector specifying the text to display in the legend. Here it would be the names of the phenotype groups. Hint: you can use function levels(), which provides categories of a factor vector. text.col - a character vector specifying the colours of the text in the legend. As there are 3 phenotype groups in our case, there should be 3 colours in this vector. These should also be the same colours as the labels within the plot. Hint: this should be the same vector of colour names used to create the groupCol vector. 4.4 Saving plots You can save plots in RStudio in the ‘Plots’ tab on the bottom right. After creating your plot, click on Export &gt; Save as Image...: Figure 4.1: Saving a plot in RStudio. This will open up a new window where you can: Specify the image file format you wish to save as. Options include png, tiff and jpeg. Specify the dimensions of the plot in pixels. Name your file. The plot will be saved in your working directory. Each step is indicated by an arrow and number below: Figure 4.2: Specifying the file type, dimensions and name of the plot. Note that you can also save your plot as a pdf using ‘Export &gt; ’Save as PDF…’. 4.5 Linear modelling The next step of the limma-voom analysis is to fit a linear model for each gene. A linear model is a broad class of statistical models that predict a variable of interest using one or more ‘explanatory’ (also called ‘predictor’) variables. The most basic type is linear regression, which models the relationship between a continuous variable and continuous or categorical ‘explanatory’ variables. It uses an equation that looks like this: \\(Y = \\beta_{0} + \\beta_{1}X_{1} + \\beta_{2}X_{2}...\\) This equation is essentially saying that a response variable of interest \\(Y\\) is equal to a constant (\\(\\beta_{0}\\)), plus a parameter multiplied by a predictor variable (\\(\\beta_{1}X_{1}\\)), plus a second parameter multiplied by a second predictor variable (\\(\\beta_{2}X_{2}\\)), and so on until there are no more predictor variables. There are many other types of linear models, including logistic regression and analysis of variance, but all predict a response variable of interest using explanatory variable(s). It is important to note that the word ‘linear’ in linear model does not mean ‘straight line’. ‘Linear’ actually describes the relationship between the parameters of the model equation and the response variable (technically the response variable must be a linear combination of the parameters but this is outside the scope of this course). A linear model equation can describe a straight line but does not have to. Although our experiment has a simple design, with 3 different cell types, limma’s linear model approach has the ability to accommodate very complex experimental designs. Before we can fit our linear model, information about the experimental design needs to be provided to the model. This is done using a ‘design matrix’. 4.5.1 Design matrix A design matrix provides your linear model with information about each sample in your experiment. Thus, in our experiment a design matrix would specify which of the 3 cell type ‘groups’ each sample belongs to. Take a look at the design matrix below: design &lt;- model.matrix(~0 + group) design ## groupBasal groupLP groupML ## 1 0 1 0 ## 2 0 0 1 ## 3 1 0 0 ## 4 1 0 0 ## 5 0 0 1 ## 6 0 1 0 ## 7 1 0 0 ## 8 0 0 1 ## 9 0 1 0 ## attr(,&quot;assign&quot;) ## [1] 1 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$group ## [1] &quot;contr.treatment&quot; There are 9 rows, one for each sample. Along each row, a ‘1’ indicates the cell type ‘group’ the sample belongs to and ‘0’ indicates cell type groups the sample does not belong to. You can think about the ‘1’ and ‘0’ as turning a cell type group ‘on’ or ‘off’. Finally, notice how one sample only belongs to one cell type group. Let’s take a look at how to generate a design matrix. We used the function model.matrix(), which took the ‘expression’ ~0 + group. Recall that group is a factor vector that specifies which cell type group each of the 9 samples belongs to: group ## [1] LP ML Basal Basal ML LP Basal ML LP ## Levels: Basal LP ML The ~ at the start tells R that we want to model the samples using the ‘expression’ to the right of the ~. The 0 at the start tells R not to include an intercept. We have chosen not to include an intercept because it is easier to interpret but including the intercept is just as valid. Challenge 4.3 Change the name of the columns of our design matrix (design) such that the word ‘group’ is not in front. Hint: use the function colnames(). 4.5.2 Contrasts ‘Contrasts’ let us ask specific questions, for example, if we want to compare expression between two specific groups. In our experiment, we are interested in the difference between each pairwise group. A contrast matrix can be made using the makeContrasts() function. Within this function, we specify the name of each specific contrast and the formula for that contrast. For example, the BasalvsLP contrasts compares the difference between the Basal and LP groups. Note that the name of the phenotype groups must be written exactly as they are in the column names of our design matrix (see above). The final input to the makeContrasts() function is simply the names of each cell type group (recall from above that colnames(design) gives the names of each cell type group). The creation and output of our contrast matrix is shown below: contr.matrix &lt;- makeContrasts( BasalvsLP = Basal - LP, BasalvsML = Basal - ML, LPvsML = LP - ML, levels = colnames(design)) contr.matrix ## Contrasts ## Levels BasalvsLP BasalvsML LPvsML ## Basal 1 1 0 ## LP -1 0 1 ## ML 0 -1 -1 Notice that the sum of all the numbers along each COLUMN is 0. The first column is the contrast for the difference between Basal (1) and LP (-1). 4.5.3 Linear model fitting We are now ready to fit our linear models. Limma fits linear models to the data with the assumption that the underlying data is normally distributed. Count data is however, not normally distributed. We must therefore, ‘normalise’ our count data first. To do this, limma first transforms the raw count data to log-cpm using library sizes and the normalisation factors we calculated previously. The mean-variance relationship of the log-cpm data is then accommodated using precision weights. These precision weights are calculated using the voom() function. The voom() function takes as arguments, our DGEList object and our design matrix. It also optionally outputs a plot of the mean-variance relationship of our data, called the ‘voom-plot’. Each point on the voom plot is a gene. On the x and y axes are the log2 of the count value + 0.5 (to prevent taking the log of 0) and the square root of the standard deviation of that gene, respectively. Typically the voom plot shows ‘variance’ decreasing as expression increases. Variance will generally plateau (i.e. remain at the same level) at high expression values. In experiments with higher biological variation, this plateau will be at a higher variance level. For example, experiments using mice as biological replicates will generally have higher variation than experiments using cell lines as biological replicates. As a result, the plateau will be at a higher variance level. v &lt;- voom(x, design, plot = TRUE) The output of voom() (our variable v) is an EList object which contains the following elements: E - numeric matrix of normalised log-cpm values. weights - numeric matrix of precision weights. design - the design matrix we gave as an argument to voom(). genes - a dataframe of gene annotation data. This is the same as the element genes from our DGEList object x. samples - dataframe of sample data. This is the same as the element samples from our DGEList object x. The EList object can also contain information about the voom plot, if you choose to save this plot when you ran the voom() function. Let’s take a look at E: head(v$E) ## Samples ## Tags 10_6_5_11 9_6_5_11 purep53 JMS8-2 JMS8-3 JMS8-4 ## 497097 -4.292165 -3.856488 2.5185849 3.2931366 -4.459730 -3.994060 ## 20671 -4.292165 -4.593453 0.3560126 -0.4073032 -1.200995 -1.943434 ## 27395 3.876089 4.413107 4.5170045 4.5617546 4.344401 3.786363 ## 18777 4.708774 5.571872 5.3964008 5.1623650 5.649355 5.081611 ## 21399 4.785541 4.754537 5.3703795 5.1220551 4.869586 4.943840 ## 58175 3.944647 3.307413 -1.7720922 -1.8891722 3.014845 3.357195 ## Samples ## Tags JMS8-5 JMS9-P7c JMS9-P8c ## 497097 3.2869677 -3.2103696 -5.295316 ## 20671 0.8442767 -0.3228444 -1.207853 ## 27395 3.8990635 4.3396075 4.124644 ## 18777 5.0602470 5.7513694 5.142436 ## 21399 5.1384776 5.0308985 4.979644 ## 58175 -2.1339189 3.1365872 3.515256 Each column is a sample and each row is a gene (called a ‘Tag’). We are now ready to fit our linear model with lmFit(), which calculates coefficients we defined in our design matrix (design). The resulting object, vfit is a MArrayLM object. It contains a information about our genes (the same dataframe as genes from our EList object v above), the design matrix and a number of statistical outputs. Of most interest to us is the coefficients, stored in an element called coefficients. The first rows of this matrix is shown below. Each gene is row and is labelled using the EntrezID. Each column gives coefficients for each of our phenotype groups. vfit &lt;- lmFit(v, design) head(vfit$coefficients) ## Basal LP ML ## 497097 3.0241632 -4.490392 -3.944477 ## 20671 0.2681245 -2.488746 -2.024896 ## 27395 4.3271126 3.901078 4.365378 ## 18777 5.2069566 4.976083 5.654066 ## 21399 5.2108711 4.901842 4.876380 ## 58175 -1.9296994 3.581328 3.133985 We can then use contrasts.fit() to calculate coefficients for each contrast (or ‘comparison’) we specified in our contr.matrix. The output is also an object of the class MArrayLM (also known as an MArrayLM object). When we inspect the coefficients element now, we can see that each column is a contrast that we specified in our contrast matrix. vfit &lt;- contrasts.fit(vfit, contrasts = contr.matrix) head(vfit$coefficients) ## Contrasts ## BasalvsLP BasalvsML LPvsML ## 497097 7.5145557 6.96864007 -0.54591559 ## 20671 2.7568708 2.29302094 -0.46384989 ## 27395 0.4260347 -0.03826548 -0.46430022 ## 18777 0.2308732 -0.44710891 -0.67798213 ## 21399 0.3090294 0.33449065 0.02546125 ## 58175 -5.5110274 -5.06368468 0.44734272 4.6 Statistical testing The next step is to carry out statistical testing to determine which genes are differentially expressed. The function eBayes() computes moderated t-statistics, moderated F-statistics and log-odds of differential expression for each gene, given a fitted linear model. ‘Moderated’ refers to empirical Bayes moderation, which borrows information across genes to obtain more accurate measures of variability for each gene. This also increases our power to detect differentially expressed genes. efit &lt;- eBayes(vfit) We can now look at the number of differentially expressed genes using the decideTests() function. The output of this function is a matrix where each column is a contrast (comparison of interest) and each row is a gene. The numbers 1, -1 and 0 mean up-regulated, down-regulated or not significantly differentially expressed, respectively. Note that decideTests() also accounts for multiple testing. The default method is Benjamini and Hochberg (Benjamini and Hochberg 1995) but several others are also available. decideTests(efit) ## TestResults matrix ## Contrasts ## BasalvsLP BasalvsML LPvsML ## 497097 1 1 0 ## 20671 1 1 0 ## 27395 0 0 0 ## 18777 0 -1 -1 ## 21399 0 1 0 ## 16619 more rows ... To obtain the total number of differentially expressed genes for each comparison, we can add the function summary(): summary(decideTests(efit)) ## BasalvsLP BasalvsML LPvsML ## Down 4500 4850 2701 ## NotSig 7307 6996 11821 ## Up 4817 4778 2102 The function topTable() can be used to obtain more information on the differentially expressed genes for each contrast. topTable() takes as arguments the MArrayLM object output by eBayes() (efit), the contrast name of interest and the number of top differentially expressed genes to output. Note that the contrast name must be given in quotes and must be exactly as written in the contrast matrix (contr.matrix). It outputs a dataframe with the following information: Gene details - gene information, from the gene element of the MArrayLM object (efit). logFC - the log2 fold change of the contrast. AveExpr - the average log2 expression of that gene. t - moderated t-statistic. P.Value - p value. adj.P.Val - adjusted p value. B - log-odds that the gene is differentially expressed. topTable(efit, coef = &quot;BasalvsLP&quot;, n = 5) ## ENTREZID SYMBOL TXCHROM logFC AveExpr t P.Value ## 12521 12521 Cd82 chr2 -4.095479 7.069637 -35.46821 3.383539e-12 ## 22249 22249 Unc13b chr4 -4.350553 5.663171 -32.38571 8.648521e-12 ## 16324 16324 Inhbb chr1 -4.721417 6.460922 -30.80826 1.447137e-11 ## 14245 14245 Lpin1 chr12 -3.768977 6.294017 -29.94805 1.937313e-11 ## 218518 218518 Marveld2 chr13 -5.215232 4.930008 -30.87689 1.414332e-11 ## adj.P.Val B ## 12521 4.660973e-08 18.41326 ## 22249 4.660973e-08 17.42652 ## 16324 4.660973e-08 17.06291 ## 14245 4.660973e-08 16.85869 ## 218518 4.660973e-08 16.76959 Challenge 4.4 Using topTable(), output a dataframe with the top 100 genes for the LP vs ML comparison and write this out to a tsv file called “LPvsML.tsv”. Hint: we did this in the first session in Section 1.11. 4.7 Answers Challenge 4.1 #1 levels(groupCol) &lt;- c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;) groupCol ## [1] &quot;green&quot; &quot;red&quot; &quot;blue&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; ## attr(,&quot;levels&quot;) ## [1] &quot;blue&quot; &quot;green&quot; &quot;red&quot; # 2 groupCol &lt;- as.character(groupCol) groupCol ## [1] &quot;green&quot; &quot;red&quot; &quot;blue&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; # 3 plotMDS(x, labels = group, col = groupCol) Challenge 4.2 groupCol &lt;- group levels(groupCol) &lt;- c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;) groupCol &lt;- as.character(groupCol) plotMDS(x, col = groupCol, main = &quot;MDS plot coloured by cell type&quot;, xlim = c(-2.8,4)) legend(&quot;topright&quot;, legend = levels(group), text.col = c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;)) Challenge 4.3 colnames(design) &lt;- c(&quot;Basal&quot;, &quot;LP&quot;, &quot;ML&quot;) Challenge 4.4 topLPvsML &lt;- topTable(efit, coef = &quot;LPvsML&quot;, n = 50) write.table(x = topLPvsML, file = &quot;LPvsML.tsv&quot;, sep = &quot;\\t&quot;, row.names = FALSE, col.names = TRUE) References "],
["extra.html", "Chapter 5 Extra 5.1 Merge 5.2 Answers", " Chapter 5 Extra Extra topics that are useful but not within the scope of this course are included in this section. 5.1 Merge Two dataframes can be combined with the merge() function. Let’s practice on the files “Ses2_genes.tsv” and “Extra_geneNames.tsv”. “Ses2_genes.tsv” contains gene EntrezIDs, gene symbol, gene chromosome, gene length and their count value. “Extra_geneNames.tsv” contains gene names and their corresponding EntrezIDs. First we will read in both files: genes &lt;- read.delim(&quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE) gene_names &lt;- read.delim(&quot;data/Extra_geneNames.tsv&quot;, stringsAsFactors = FALSE) What we want to do now, is to add the GENENAME column from gene_names dataframe to the genes dataframe. Of course we want to make sure that when R merges the dataframes, the correct GENENAME is added to the correct row. You will notice that both the genes and gene_names dataframes have a column giving the EntrezIDs. This column can be used to ensure the correct GENENAME is added to the correct row in the genes dataframe. We therefore want merge() to match rows in the two dataframes using EntrezIDs while it is merging. merge() has the following syntax: merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first dataframe by.y = # name of the column to match in the second dataframe ) Thus, to merge our two dataframes, using the EntrezID column of each dataframe to match rows, we can use: genes2 &lt;- merge(x = genes, y = gene_names, by.x = &quot;EntrezID&quot;, by.y = &quot;ENTREZID&quot;) head(genes2) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 Bmp2 chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 ## GENENAME ## 1 activin receptor IIA ## 2 autoimmune regulator (autoimmune polyendocrinopathy candidiasis ectodermal dystrophy) ## 3 bone morphogenetic protein 2 ## 4 calcium channel, voltage-dependent, R type, alpha 1E subunit ## 5 cyclin F ## 6 cadherin 6 Challenge E.1 You may have noticed that there are 200 rows in the genes dataframe but 290 rows in the gene_names dataframe. This means that there are more gene names contained. We can also specify which rows to keep when merging: merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first dataframe by.y = # name of the column to match in the second dataframe all.x = # logical. If TRUE, keep all rows from the first dataframe, # even if does not have a matching row in the second dataframe all.y = # logical. If TRUE, keep all rows from the second dataframe, # even if does not have a matching row in the second dataframe ) Merge the two dataframes again, but this time keep all rows from both dataframes. 5.2 Answers Challenge E.1 genes2 &lt;- merge(x = genes, y = gene_names, by.x = &quot;EntrezID&quot;, by.y = &quot;ENTREZID&quot;, by.x = TRUE, by.y = TRUE) "],
["references.html", "References", " References "]
]
