[
["index.html", "Introduction to Base R Preface", " Introduction to Base R Lucy Liu 2019-03-25 Preface This introduction to base R course was designed for biologists with no previous programming experience. It has a focus on analysing RNA-sequencing data with the Bioconductor package limma. The F1000 paper ‘RNA-seq analysis is easy as 1-2-3 with limma, Glimma and edgeR’ was used as a guide for the latter sessions. It is intended to be delivered over four 2.5 hour workshops. Acknowledgements Thank you to Shian Su and Brendan Ansell for your suggestions and review of this tutorial. This page was generated using the bookdown package by YiHui Xie. The source code for this page can be found on Github. "],
["session-1.html", "Chapter 1 Session 1 1.1 R and RStudio 1.2 R scripts 1.3 Help 1.4 Working directory 1.5 Maths 1.6 Comparisons 1.7 Variables 1.8 Data structures 1.9 Reading in data 1.10 Data types 1.11 Vectorisation 1.12 Writing out data 1.13 Homework 1.14 Answers", " Chapter 1 Session 1 In this first session we will learn about: R and RStudio data types and data structures vectorisation how to read in and write out data 1.1 R and RStudio R is a free and open source statistical programming language, great for performing data analysis. RStudio is a free and open source R integrated development environment (IDE) which makes it easier for you to write code. It does this by providing you with auto-completion (of variable names, function names, file paths etc.), helping with formatting and keeping track of your variables. You can think of R as the engine in a car and RStudio as the body &amp; controls. R is doing all the calculations/computations but RStudio makes it easier for you to use R. When you first open RStudio, there will be three panels - see Figure 1.1 (don’t worry if your RStudio does not have the same colours/appearance - different versions of RStudio look slightly different and the text colour I use is not the default one.) Figure 1.1: Three panels in RStudio. Left panel: this panel features two tabs, ‘Console’, which is where you can type in commands for R to run and ‘Terminal’, which we won’t worry about in this course. Top right panel: Environment - in this tab you can see all variables you have created. History - R keeps track of all commands you have run and you can review them in this tab. Connections - this tab helps you connect to data sources but we will not be using it in this course. Bottom right: Files - you can explore your file directory here and we will use it to set our working directory later. Plots - plots that you create will either appear here or be saved to a file. Help - help files for R functions can be viewed in this tab. Help files tell you about what a function does and how to use it. Packages - basic R includes many useful functions. You can add even more functions by downloading packages. A package is a collection of functions, generally with a certain data analysis theme. For example, the package ‘limma’, which we will use later, includes functions designed for analysing RNA-sequencing data. Viewer - this tab lets you view local web content but we won’t be using it in this course. 1.2 R scripts To open a R script, go to File &gt; New File &gt; R Script. Figure 1.2: Opening a new R Script. This will open a fourth panel on the top left. Figure 1.3: Four panels, including a R Script. A R Script is just a text document. You can type and run commands using a R Script and down in the Console - the difference is that you can’t save the commands you run in the Console but you can save the R Script with all your commands. Note that to run a command in the Console press Enter key but to run a command in a R Script you must press Cmd/Cntrl + Enter keys. Lastly, you can make ‘comments’ in your R Script. Comments are notes to yourself that are not interpreted by R and start with #: # this is a note to myself 1+3-2 ## [1] 2 1.3 Help There are two ways to access help files in RStudio. You can type in the name of the function you want help with, in the top right of help tab (indicated with a red arrow): Figure 1.4: Accessing help files via ‘help’ tab. The other option is to run the command ? followed by the name of the function: ?sum Help files are very useful but can be difficult to interpret at first due to the technical language used. We won’t get too much practice reading help files during this course but I would encourage you to try to use them when figuring out how to use a new function. 1.4 Working directory Every file on your computer is located in a specific location. This location can be referred to by a path. In Mac, paths look something like this: /Users/Lucy/Documents/. In Windows, paths look something like this: C:\\Users\\Lucy\\Documents\\. When you open a R session, it launches from a specific location. You can find out where this is using the command getwd(). This location called the ‘working directory’. R will, by default, look in this directory when reading in data and write out files/plots to this directory. It is often useful to have your data and R Scripts in the same directory and set this as your working directory. You can set your working directory to be anywhere you like and we will now do this: Make a folder for this course, somewhere sensible on your computer that you will be able to easily find. Go back to your RStudio window, go to the bottom right panel, click on the ‘Files’ tab and then click on the three dots on the top right hand corner (Figure 1.5). Figure 1.5: Setting the working directory - 1. This will open up a new window (Figure 1.6) which lets you explore the files and folders on your computer. Find the new folder you created, click on it then click ‘Open’. Figure 1.6: Setting the working directory - 2. The files tab will now show the contents of your new folder (which should be empty). At the top of the files tab, click on More &gt; Set As Working Directory (Figure 1.7). Figure 1.7: Setting the working directory - 3. Please set your working directory to be this folder at the start of EVERY session. 1.5 Maths R performs maths and follows standard order of operations. In order of highest to lowest precedence, here is how mathematical operations are denoted in R: () - parentheses ** or ^ - exponents / - divide * - multiply + - add - - subtract Another useful function is modulus (%%), which gives the remainder after dividing: 8%%3 ## [1] 2 1.6 Comparisons You can also compare numbers in R: 1 == 1 # equal to. ## [1] TRUE 2 &gt; 1 # greater than. ## [1] TRUE 2 &lt; 1 # less than. ## [1] FALSE 1 &lt;= 2 # greater or equal to. ## [1] TRUE 1 &gt;= 2 # less than or equal to. ## [1] FALSE What do you think will happen if we compare words? &quot;cat&quot; &gt; &quot;dog&quot; ## [1] FALSE R will use alphabetical order to determine which word is ‘greater’: &quot;a&quot; &lt; &quot;b&quot; ## [1] TRUE 1.7 Variables A variable in R is just a name which refers to an ‘thing’ (more technically an ‘object’ in R). For example, I can do some maths: 2 + 6 * 7**2 ## [1] 296 R outputs the result. However, if I want to ‘save’ this result to use later, I need to ‘assign’ the output to a variable. This can be thought of as giving it a name, so that we can refer to it later. You can this with &lt;- (shortcut = alt + -) in R. (You can also use =, however stylistically &lt;- is preferred.) Here R performs the calculation on the right of &lt;- and then saves the result as a variable called my_num. my_num &lt;- 2 + 6 * 7**2 Now if I run the command my_num, I see the number I stored earlier: my_num ## [1] 296 You can also ‘overwrite’ variables: my_num &lt;- 3 * 4 The above code evaluates 3 * 4 and assigns the output to the variable my_num - effectivey ‘overwritting’ the previous value assigned to it. my_num ## [1] 12 R is particular about variable names. Variable names cannot: start with a number, contain any spaces. If we try to create a variable that starts with a number, R will return us an error: 2myvar &lt;- 2 + 6 * 7**2 ## Error: &lt;text&gt;:1:2: unexpected symbol ## 1: 2myvar ## ^ 1.7.1 Errors and warnings This is a good time to talk about ‘errors’ and ‘warnings’ in R. An error is R telling you that it couldn’t do what you told it to do. Do not be disheartened at seeing an error message - it happens to everyone, including experienced programmers, all the time. DO read the error message, it is often very useful and tells you what you need to do to fix the error. A warning is R telling you that is has done what you told it to do, however the result may not be what you want. Sometimes it is okay to ignore a warning, sometimes it is not! 1.8 Data structures A data structure can be thought of as a ‘container’ for data. There are a number of different data structures in R and each have different specifications about how data is ‘contained’. Three commonly used data structures are summarised below: Figure 1.8: Data structures. Source: http://libguides.wellesley.edu. Another useful data structure is a ‘list’, which we will talk about in Session 3. 1.8.1 Vector You can think of a vector like a row or column in excel. You can only store one type of data in a vector - e.g. all numbers or all text. You can create vectors with the c() function (‘c’ for ‘combine’): my_vect1 &lt;- c(1,2,3) my_vect2 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) 1.8.2 Matrix A matrix is like an excel spreadsheet. It is two dimensional meaning you have columns and rows of data. You can only store one type of data in a matrix - e.g. all numbers or all text. 1.8.3 Dataframe Dataframes are also two dimensional (has both rows and columns) however, you can store different types of data in a dataframe. The only restriction is that all the data within one column must be of the same type. 1.9 Reading in data Let’s read in some data and start exploring it. You should have received the data files via email before the course. Please download these files and make sure they are located in your working directory. Recall, we set our working directory above. You can find the location of your working directory with the function getwd(). If you are following along outside of the WEHI course, you can download the data files from Github - instructions for downloading data from GitHub can be found in the Preface. The file we want to read in is named ‘Ses1_genes.tsv’. I have put all my data files in a directory called ‘data’ - thus the path to the file (relative to my working directory) is ‘data/Ses1_genes.tsv’. Depending on where you have put your data (in your working directory or in another file in your working directory), the path to your file ‘Ses1_genes.tsv’ may be different. Read in your data by typing in the path to your ‘Ses1_genes.tsv’ file (relative to your working directory), within the brackets ( ): read.delim(&quot;data/Ses1_genes.tsv&quot;) ## SYMBOL GeneLength Count ## 1 Gm10568 1634 0 ## 2 Gm19860 799 4 ## 3 Gm19938 3259 0 ## 4 Lypla1 2433 768 ## 5 Rp1 9747 0 ## 6 Sox17 3130 1 ## 7 Tcea1 2847 810 ## 8 Mrpl15 4203 431 ## 9 Xkr4 3634 1 ## 10 Rgs20 2241 452 Note that read.delim() also lets you specify what kind of file you are reading in - by this I mean how each value is separated. Two common formats are ‘csv’ (comma separated values) and ‘tsv’ (tab separated values). Example of csv file: Name, Age Andy, 10 Bob, 8 Example of tsv file: Name Age Andy 10 Bob 8 Note how the values in each file are separated by a different ‘character’ in the two file formats. You can specify what using the sep input in read.delim(). E.g. if your file was a csv, you can read it in using: read.delim(&quot;file.csv&quot;, sep = &quot;,&quot;) We don’t need to specify the sep for our file, which is a tsv, as the default separater read.delim() assumes is tab. Thus we only need to specify when we are reading in a file NOT separated by tabs. Above, we have read in our data as a dataframe and printed it. However, we can’t refer to this dataframe again and manipulate it because we haven’t assigned it to a variable. Let’s assign our dataframe to a variable called genes: genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;) Notice how genes now appears in our ‘Environment’ tab: Figure 1.9: Variable in ‘Environment’ tab. All variables that we create will be shown in this tab, so it is a useful way to keep track of variables that we have created. Notice how R also tells us that there are 10 observations (rows) and 3 variables (columns) in the genes dataframe. We can further explore our dataframe with the function str() (structure): str(genes) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : Factor w/ 10 levels &quot;Gm10568&quot;,&quot;Gm19860&quot;,..: 1 2 3 4 7 8 9 5 10 6 ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 This tells us that genes is a dataframe. It also tells us what data type each column is. 1.9.1 Summary A useful function for investigating your data is summary(). Running this function on our genes dataframe provides us with summary statistics on all the numeric columns. For the columns that don’t contain numbers, the output simply states the length of that column. summary(genes) ## SYMBOL GeneLength Count ## Gm10568:1 Min. : 799 Min. : 0.00 ## Gm19860:1 1st Qu.:2289 1st Qu.: 0.25 ## Gm19938:1 Median :2988 Median : 2.50 ## Lypla1 :1 Mean :3393 Mean :246.70 ## Mrpl15 :1 3rd Qu.:3540 3rd Qu.:446.75 ## Rgs20 :1 Max. :9747 Max. :810.00 ## (Other):4 1.10 Data types Every bit of data in R has a ‘data type label’. The label doesn’t change the data in any way - it just tells R what kind of data it is and thus what it can and can’t do with the data. For example, it makes sense to perform mathematical functions on numbers but not on words. It makes sense to look for a certain term, like a gene name, in a word but not in a number. For example, you can’t add ‘characters’. Thus this doesn’t work because &quot;1&quot; and &quot;2&quot; are labelled as ‘characters’: &quot;1&quot; + &quot;2&quot; ## Error in &quot;1&quot; + &quot;2&quot;: non-numeric argument to binary operator This does work: 1 + 2 ## [1] 3 There are five basic types of data in R: logical - either TRUE or FALSE. This is useful for data that only has two possible values, like if patient has a disease or not. integer - number without decimal point e.g. 3. double - number with decimal point e.g. 3.14. complex - complex number with a real and imaginary part e.g. 1 + 3i character - Anything with character(s) within it. Quotes (double or single) signify this data type e.g. &quot;pi&quot;. Also known as a ‘string’. In our genes dataframe above, we can see that both the GeneLength and Count columns are integers (‘int’). But what is the SYMBOL column? It is a ‘Factor’. 1.10.1 Factors Factor is a data type label used for categorical variables (e.g. small, medium and large OR red, blue and green). Internally, R stores factors as numbers (integers), with each number corresponding to a category. For example, if your data was: red, blue, green, red, green Internally, R would store the data as: 1, 2, 3, 1, 3 Each number corresponds to a category. This information is also stored. In R, the categorical values each number corresponds to, is called ‘levels’. The levels for the above data would be: 1 = red 2 = blue 3 = green Factors can be difficult to work with, so we don’t want our gene symbols to be ‘labelled’ as factors. We can do this by specifying this when reading our data in: genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;, stringsAsFactors = FALSE) By default, R will label all word (‘character’) data as a ‘factor’. Setting stringsAsFactors to be FALSE, tells R that you DON’T want it to do this. We can check the structure again: str(genes) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : chr &quot;Gm10568&quot; &quot;Gm19860&quot; &quot;Gm19938&quot; &quot;Lypla1&quot; ... ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 Note that now the column SYMBOL is now a character (‘chr’). Another way to change the labels of data in R is with the following functions: as.logical() as.integer() as.double() as.complex() as.character() For example, this will turn a integer vector into a character vector: as.character(c(1,2,3)) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; Note the quotes, which always signify the character type. 1.10.2 Type coercion In some circumstances, R will change the data type label of your data. This is called ‘type coercion’. A common scenario in which this will happen is with vector (and dataframe column) labelling. All elements within a vector (and within a column of a dataframe) must have the same data type label. Thus, if you create a vector like the one below, the whole vector will be labelled as one data type. Which data type do you think it will be? my_vect3 &lt;- c(1, 2, &quot;a&quot;) We can find out with str(): str(my_vect3) ## chr [1:3] &quot;1&quot; &quot;2&quot; &quot;a&quot; It has labelled the whole vector as characters. This is because the letter &quot;a&quot; cannot be “expressed” as a number but numbers can be “expressed” as characters - thus R will always pick the data type label that does not result in any loss of information. Recall that data type labels NEVER change the data - only the label changes. There is an order to which data label R will label a vector as. Of all the data types that exist in the vector, the data type of the element that is furtherest right, will be the “final” data type label for the vector. logical &gt; integer &gt; double &gt; complex &gt; character This order makes sense: the logicals TRUE and FALSE can be represented by numbers with TRUE = 1 and FALSE = 0. when logicals are labelled as the character type, TRUE simply becomes &quot;TRUE&quot; an integer can easily be represented by a double - 3 becomes 3.0 as we saw above, numbers can easily be represented as a character The last thing to note is that you may see the type num: str(c(1,2,3)) ## num [1:3] 1 2 3 num stands for numeric and is just the ‘number’ data types grouped together. R does this for two reasons. First, generally you don’t need to know exactly what ‘type’ of number class your data is. Second, R will often convert between number types depending the type of calculations/function performed. Challenge 1.1 What data type will the following vectors be? # 1 c(TRUE, 3, 4) # 2 c(&quot;hello&quot;, TRUE, 4) # 3 c(4, &quot;5&quot;) 1.11 Vectorisation R is quite efficient at doing calculations or performing a functions on a vector of data. Let’s use the Count column from our dataframe genes. We can access just one column using the $ symbol: genes$Count ## [1] 0 4 0 768 0 1 810 431 1 452 What do you think will happen if we do this? genes$Count + 10 ## [1] 10 14 10 778 10 11 820 441 11 462 R will perform this calculation on all numbers in the Count column and return a vector. We can add this new vector to our dataframe, as a new column. genes$Count_2 &lt;- genes$Count + 10 There are a few things happening in the command above: The code on the right side of &lt;- is evaluated first. It returns a vector as we saw above. This vector is assigned to a column in genes called Count_2. Since this column does not yet exist in the genes dataframe, a new column called Count_2 is created first. (If there was already a column name Count_2, this command will have overwritten that column with the new vector created in the right side of &lt;-) Challenge 1.2 Create a new column called Prop_Count that contains each count value as a proportion of the total count value of all 10 genes in the dataframe. E.g. if Count was 10 and total count of all 10 genes is 100, that row in Prop_Count should be 0.1. Hint use the sum() function. 1.12 Writing out data The last thing we will do this session is to write out our new dataframe using the function write.table(). There are a few things we must tell write.table(), for it to be able to write out the data the way we want: x - the name of this input is not very informative, but first you must tell the function what you want to write out. In our case we want to write out our dataframe genes. file - the name of the file that we want to write to. sep - how each value in our output file is separated. Common file formats are ‘csv’ and ‘tsv’ (discussed above). In R, a tab is represented by &quot;\\t&quot;. row.names - this is either TRUE or FALSE, and let’s you specify whether you want to write out row names. If your dataframe does not have row names, put FALSE. col.names - this is also either TRUE or FALSE, and let’s you specify whether you want to write out column names. If your dataframe has column names, put TRUE. write.table(x = genes, file = &quot;Ses1_Genes_output.tsv&quot;, sep = &quot;\\t&quot;, row.names = FALSE, col.names = TRUE) 1.13 Homework Read in the data file “Ses1_homework.tsv” using read.delim(). This file is similar to the “Ses1_genes.tsv” file but with a different 10 genes. Create a new column called Prop_GeneLength that contains the Count value as a proportion of GeneLength. E.g. if the count value was 50 and the gene length was 2400, the Prop_GeneLength value for that row would be 0.02083333. Finally, write out this new dataframe as a file called “Ses1_homework_output.tsv”, as a tsv (tab separated values) file. 1.14 Answers Challenge 1.1 str(c(TRUE, 3, 4)) ## num [1:3] 1 3 4 str(c(&quot;hello&quot;, TRUE, 4)) ## chr [1:3] &quot;hello&quot; &quot;TRUE&quot; &quot;4&quot; str(c(4, &quot;5&quot;)) ## chr [1:2] &quot;4&quot; &quot;5&quot; Challenge 1.2 The sum() function can be used to calculate the total Count of all 10 rows by giving the genes$Count vector as the input to sum(). genes$Prop_Count &lt;- genes$Count / sum(genes$Count) genes ## SYMBOL GeneLength Count Count_2 Prop_Count ## 1 Gm10568 1634 0 10 0.0000000000 ## 2 Gm19860 799 4 14 0.0016214025 ## 3 Gm19938 3259 0 10 0.0000000000 ## 4 Lypla1 2433 768 778 0.3113092825 ## 5 Rp1 9747 0 10 0.0000000000 ## 6 Sox17 3130 1 11 0.0004053506 ## 7 Tcea1 2847 810 820 0.3283340089 ## 8 Mrpl15 4203 431 441 0.1747061208 ## 9 Xkr4 3634 1 11 0.0004053506 ## 10 Rgs20 2241 452 462 0.1832184840 "],
["session-2.html", "Chapter 2 Session 2 2.1 Missing values 2.2 Subsetting 2.3 Merge 2.4 Functions 2.5 Homework 2.6 Answers", " Chapter 2 Session 2 In this session we will learn about: missing values subsetting data structures how to merge two dataframes how functions are created and used 2.1 Missing values First, let’s read in some data. Recall we use the function read.delim() and tell R not to label words as ‘Factors’ using stringsAsFactors = FALSE. We are using the file “Ses2_genes.tsv” today. Again, this would have been emailed to you before the session. Alternatively you can download the data from GitHub. genes &lt;- read.delim(&quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE) You can see in the environment tab that this dataframe has 200 rows (observations) and 5 columns (variables). You can also click on the genes entry in the Environment tab (red arrow in Figure 2.1) to display the data in a new window (left): Figure 2.1: Viewing data from the ‘Environment’ tab. Scrolling down the window, you can see that there are several NA entries. NA denotes a missing value in R. NA‘s have some interesting behaviour - they are ’contagious’. For example, if we wanted to take the mean of a vector numbers, which includes a NA, the answer is NA. If we think about it, it makes sense that the mean of two numbers and a ‘missing’ number, that could be anything, is NA. mean(c(2,3,NA)) ## [1] NA Luckily many functions have a na.rm input, where you can tell it to remove NA values: mean(c(2,3,NA), na.rm = TRUE) ## [1] 2.5 Later we will learn how to remove the NA values from our dataframe. 2.2 Subsetting Subsetting involves selecting a portion of a data structure and uses square brackets [ ]. There are two main ways to subset a data structure: Use indices - data structures are all ordered and ‘numbered’ in R. This means that you can refer to the 4th element in a vector or the element in the 1st row and 3rd column of a dataframe. Use logicals - recall that a logical is TRUE or FALSE. You can use comparisons (e.g. equal to ==, greater than &gt;) to determine if each element in your data structure meet your requirements and use this to subset your data. 2.2.1 Subsetting with indicies Let’s take a look at subsetting vectors first. We can use $ to obtain just one column from the genes dataframe. The output will be a vector. genes$Count ## [1] 979 15 932 0 214 2 2 0 1790 41 1033 ## [12] 700 2075 351 22 0 0 893 3 100 32100 269 ## [23] 34 20005 5751 0 275 9 849 7175 768 358 234 ## [34] 5065 2096 1994 757 0 2310 0 1 0 3091 810 ## [45] 30 816 817 1 580 33 0 941 1445 522 2 ## [56] 2346 572 431 5797 2 70 1236 966 235 2 3009 ## [67] 431 452 2602 3481 99 11857 35 1952 0 706 1317 ## [78] 1130 92 0 871 730 3892 3772 20 7 0 756 ## [89] 1 210 101 17 21 537 1240 930 1 1 0 ## [100] 221 1599 0 67 1 0 315 0 0 739 0 ## [111] 0 976 1 715 18636 289 1396 0 101 285 1665 ## [122] 47 2 4483 2 363 169 135 0 2 0 11 ## [133] 4088 1082 92 0 3888 17 0 0 0 0 0 ## [144] 0 0 0 0 0 2442 30 1610 0 0 0 ## [155] 16 1 2 0 47 0 1118 0 1 0 2 ## [166] 3 22 0 0 0 0 0 0 0 431 0 ## [177] 0 16 0 1 0 4 0 0 1 0 0 ## [188] 0 0 301 0 0 0 0 0 0 0 0 ## [199] 0 59 We will assign this to a variable called Counts. Counts is now a variable that refers to a vector containing 200 integers. Counts &lt;- genes$Count This will give you the 3rd element of the vector Counts: Counts[3] ## [1] 932 This will give you all the elements from the 3rd to the 10th: Counts[3:10] ## [1] 932 0 214 2 2 0 1790 41 This will give you the 3rd, 5th and 10th elements: Counts[c(3,5,100)] ## [1] 932 214 221 Note that we have used c() within the square brackets. This is because R expects ONE ‘object’ within the square brackets. Thus, if you want to extract several indices, you must give it ONE vector containing the indices of the elements. A vector (e.g. c(3,5,10)) is considered one ‘object’ but the numbers 3,5,10 are considered three different ‘objects’. Indeed, 3:10, which we used earlier, is actually a vector of the numbers 3 to 10: 3:10 ## [1] 3 4 5 6 7 8 9 10 Lastly, this gives you all the elements EXCEPT the elements 10 through to 200: Counts[-(10:200)] ## [1] 979 15 932 0 214 2 2 0 1790 Subsetting a 2 dimensional data structure (e.g. a dataframe or matrix) is similar to subsetting a vector, except you now must specify which rows AND which columns you want. The syntax for the genes dataframe looks like this: genes[ (which rows you want) , (which columns you want) ] Within the square brackets, you must first tell R which rows you want LEFT of the comma, then which columns you want RIGHT of the comma. The code below will give you the 3rd to 5th rows of the 2nd and 4th columns. Note that the output is a dataframe. genes[3:5,c(2,4)] ## SYMBOL GeneLength ## 3 Bmp2 2515 ## 4 Cacna1e 12697 ## 5 Ccnf 3099 We could have also done this using the names of the columns. Note that column names are enclosed in quotes signifying that they are of the ‘character’ data type. genes[3:5,c(&quot;SYMBOL&quot;,&quot;GeneLength&quot;)] ## SYMBOL GeneLength ## 3 Bmp2 2515 ## 4 Cacna1e 12697 ## 5 Ccnf 3099 If you leave the left side of comma empty, R will give you ALL the rows. If you leave the right side of the comma empty, R will give you ALL the columns. This will give you the 2nd row and all the columns. genes[2,] ## EntrezID SYMBOL TXCHROM GeneLength Count ## 2 11634 Aire chr10 1929 15 2.2.2 Subsetting with logicals If you recall from section 1.6, you can make comparisons in R. The result of a comparison is either TRUE or FALSE: 1 &lt; 2 ## [1] TRUE Comparisons are also vectorised: genes$Count &ltor each element in the vector genes$Count, R checks if it is less than 100, then returns either TRUE or FALSE. The output is a vector of logicals. This can be used to subset in R. We will start with our Counts vector: Counts[Counts &lt; 100] ## [1] 15 0 2 2 0 41 22 0 0 3 34 0 9 0 0 1 0 30 1 33 0 2 2 ## [24] 70 2 99 35 0 92 0 20 7 0 1 17 21 1 1 0 0 67 1 0 0 0 0 ## [47] 0 1 0 47 2 2 0 2 0 11 92 0 17 0 0 0 0 0 0 0 0 0 0 ## [70] 30 0 0 0 16 1 2 0 47 0 0 1 0 2 3 22 0 0 0 0 0 0 0 ## [93] 0 0 16 0 1 0 4 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [116] 59 Counts &lt; 100 will return a vector of 200 logicals, which indicate which elements are less than 100. Putting this inside square brackets will subset Counts such that only the elements that are less than 100 (the TRUE’s) remain. This is done similarly in 2 dimensional data structures. The command below selects the rows where the genes$Count column equal to 0. genes[genes$Count == 0,] Because there are so many rows with a genes$Count of 0, I’ll use the head() function to print out just the first 6 rows of the output: head(genes[genes$Count == 0,]) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 4 12290 Cacna1e chr1 12697 0 ## 8 12647 Chat chr14 2810 0 ## 16 14800 Gria2 chr3 7749 0 ## 17 14843 Gsx2 chr5 1665 0 ## 26 17695 Msmb chr14 522 0 ## 38 19888 Rp1 chr1 9747 0 If you add ! to the start of the genes$Count == 0 condition statement, you will get all the rows where genes$Count is NOT equal to 0. Another way to think about it is that genes$Count == 0 gives you a logical vector of 200 TRUE’s and FALSE’s and ! flips everything such that the TRUE’s become FALSE’s and vice versa. We do this here and print the first 6 rows of the output: head(genes[! genes$Count == 0,]) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 Bmp2 chr2 2515 932 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 ## 7 12565 Cdh9 chr15 2903 2 We can use the $ shortcut to obtain just one column in a dataframe. We can’t do this with matricies - we have to use the [ ] notation instead. For example, we can create a matrix from our genes dataframe. Recall that a matrix can only hold data of ONE data type - thus we will create a dataframe using just the GeneLength and Count columns of the genes dataframe. The first 6 rows are printed out: gene_matrix &lt;- as.matrix(genes[,c(4,5)]) head(gene_matrix) ## GeneLength Count ## [1,] 5681 979 ## [2,] 1929 15 ## [3,] 2515 932 ## [4,] 12697 0 ## [5,] 3099 214 ## [6,] 2632 2 If we wanted just the rows where Count was equal to 0, this is the notation we could use: head( gene_matrix[gene_matrix[,2] == 0, ] ) ## GeneLength Count ## [1,] 12697 0 ## [2,] 2810 0 ## [3,] 7749 0 ## [4,] 1665 0 ## [5,] 522 0 ## [6,] 9747 0 We used the [ ] to specify that we want to use the 2nd column of the matrix, which is the Count column. Like above, the == checks if each element in the Count column is 0. There is nothing entered to the right of the comma, indicating that we want all the columns. Challenge 2.1 Subset the genes dataframe to obtain the rows where the Count is less than or equal to 10 and the columns TXCHROM and Count. The function is.na() checks if each element in a vector is NA: is.na(c(2,5, NA)) ## [1] FALSE FALSE TRUE Use this function to subset the genes dataframe so that all rows where TXCHROM column is NA is removed. Using the dataframe from above subset to get only the rows where the TXCHROM is ‘chr1’ and all columns. Hint: you can refer to section 1.6 to check how to perform different types of comparisons in R. 2.2.3 %in% In the last challenge, we used == to obtain the rows where TXCHROM is ‘chr1’. Another way to perform ‘matching’ tasks is with the %in% function. The following command subsets the rows where TXCHROM is “chr1” or “chr2” and prints out the first 6 rows. head( genes[genes$TXCHROM %in% c(&quot;chr1&quot;, &quot;chr2&quot;),] ) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 3 12156 Bmp2 chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 18 15064 Mr1 chr1 2509 893 ## 19 15112 Hao1 chr2 2029 3 ## 21 15939 Ier5 chr1 3270 32100 Challenge 2.2 There is an important difference between == and %in%. Let’s start by creating a vector of numbers: vect1 &lt;- c(10,10,5,5,8,8) We check which elements in our vector is equal to 5. vect1 == 5 ## [1] FALSE FALSE TRUE TRUE FALSE FALSE The output is what we would expect. What if we wanted check which elements are equal to 5 OR 10? We might try something like this, where put the numbers we are checking for in a vector: vect1 ## [1] 10 10 5 5 8 8 vect1 == c(5,10) ## [1] FALSE TRUE TRUE FALSE FALSE FALSE This isn’t the output we expected. Let’s try the same task with %in%: vect1 %in% c(5,10) ## [1] TRUE TRUE TRUE TRUE FALSE FALSE This output IS what we want. Take a look at the code above and see if you can understand what == does and what %in% does. Hint: The story gets even more interesting if we try to use == to look for four numbers: vect1 == c(5,10,1,3) ## Warning in vect1 == c(5, 10, 1, 3): longer object length is not a multiple ## of shorter object length ## [1] FALSE TRUE FALSE FALSE FALSE FALSE This warning message may seem a bit cryptic. The ‘longer’ object it is referring to is vect1 which has 6 elements. The shorter object it is referring to is c(5,10,1,3), which has 4 elements. Thus, it is saying that 6 is not a multiple of 4. The reason R wants the longer object to be a multiple of the shorter one, is key to understanding what is happening when we use ==. 2.3 Merge Two dataframes can be combined with the merge() function. First, let’s read in the file “Ses2_geneNames.tsv”, which contains gene names and their corresponding ENTREZIDs. gene_names &lt;- read.delim(&quot;data/Ses2_geneNames.tsv&quot;, stringsAsFactors = FALSE) What we want to do now, is to add the GENENAME column from gene_names dataframe to the genes dataframe. We also want to make sure that when R merges the dataframes, the correct GENENAME is added to the correct row. You will notice that both the genes and gene_names dataframes have a column giving the EntrezIDs. Thus, we want merge() to match rows using EntrezIDS while it is merging. merge() has the following syntax: merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first dataframe by.y = # name of the column to match in the second dataframe ) Thus, to merge our two dataframes we can use: genes2 &lt;- merge(x = genes, y = gene_names, by.x = &quot;EntrezID&quot;, by.y = &quot;ENTREZID&quot;) head(genes2) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 Bmp2 chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 ## GENENAME ## 1 activin receptor IIA ## 2 autoimmune regulator (autoimmune polyendocrinopathy candidiasis ectodermal dystrophy) ## 3 bone morphogenetic protein 2 ## 4 calcium channel, voltage-dependent, R type, alpha 1E subunit ## 5 cyclin F ## 6 cadherin 6 Challenge 2.3 You may have noticed that there are 200 rows in the genes dataframe but 290 rows in the gene_names dataframe. This means that there are more gene names contained. We can also specify which rows to keep when merging: merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first dataframe by.y = # name of the column to match in the second dataframe all.x = # logical. If TRUE, keep all rows from the first dataframe, # even if does not have a matching row in the second dataframe all.y = # logical. If TRUE, keep all rows from the second dataframe, # even if does not have a matching row in the second dataframe ) Merge the two dataframes again, but this time keep all rows from both dataframes. 2.4 Functions A function, as the namne suggests performs a function. We have already used many functions. For example, the read.delim() function reads in data, the sum() function adds numbers up and the merge() function above merges two dataframes. Formally, when using a function, brackets (( )) are always included after the name of the function. Within the brackets is where input (technically ‘arguments’) to the function goes. You can find out what inputs an argument takes by looking at the help file. For example, let’s take a look at the rnorm() function help file. This function generates a random number from a normal distribution. Figure 2.2: rnorm help file. We can see from the help file that rnorm() takes in 3 arguments: rnorm(n, mean = 0, sd = 1) The help file also tells us what each of these arguments does: n - number of observations. If length(n) &gt; 1, the length is taken to be the number required. mean - vector of means. sd - vector of standard deviations. Challenge 2.4 Take a look at what the rnorm() function outputs in the code below and have a go plugging various inputs to the function. Then try to answer the following questions: What does rnorm() do when you only give it one number to the mean and sd arguments? What happens when you give either argument a vector of numbers? rnorm(4, mean = 10, sd = 1) ## [1] 11.443718 8.498398 7.998256 10.316017 rnorm(3, mean = c(100,0), sd = 1) ## [1] 99.718476 -0.762905 99.311817 Take a look at the following code: rnorm(3,1,10) ## [1] 2.223590 -3.648631 16.978176 rnorm(10,1,3) ## [1] -1.6557525 1.8041998 -3.9866932 0.7069439 -0.7504523 4.1446069 ## [7] 1.5295045 7.0899763 -4.5496482 -4.2119567 rnorm(3, mean = 10, sd = 0) ## [1] 10 10 10 rnorm(sd = 10, mean = 0, n = 3) ## [1] 3.015813 4.479305 7.382313 How does the order of the arguments you input to the function affect the output? How does the order of the arguments you input affect the output, when you name each argument (along with the input)? Note: as the function generates a random number, the numbers you will get from running the function will be different to the ones generated above. 2.5 Homework We will use the Bioconductor packages ‘limma’ and ‘edgeR’ in the next session. Before the next sesssion, please install these packages with the following commands: if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(c(&quot;edgeR&quot;, &quot;limma&quot;), version = &quot;3.8&quot;) 2.6 Answers Challenge 2.1 This code obtains rows where Count is less than or equal to 10 and prints the first 6 rows using head(): head(genes[genes$Count &lt;= 10,]) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 4 12290 Cacna1e chr1 12697 0 ## 6 12563 Cdh6 chr15 2632 2 ## 7 12565 Cdh9 chr15 2903 2 ## 8 12647 Chat chr14 2810 0 ## 16 14800 Gria2 chr3 7749 0 ## 17 14843 Gsx2 chr5 1665 0 This code removes all rows where the TXCHROM column has a NA value (keeping all columns) and prints the first 6 rows: head(genes[! is.na(genes$TXCHROM),]) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 Bmp2 chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 First we save the dataframe from the above as a variable called genes_noNA, then we subset to get only the rows where TXCHROM is ‘chr1’. Again we only print the first 6 rows of this output. genes_noNA &lt;- genes[! is.na(genes$TXCHROM),] head(genes_noNA[genes_noNA$TXCHROM == &quot;chr1&quot;,]) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 4 12290 Cacna1e chr1 12697 0 ## 18 15064 Mr1 chr1 2509 893 ## 21 15939 Ier5 chr1 3270 32100 ## 31 18777 Lypla1 chr1 2433 768 ## 36 19775 Xpr1 chr1 7651 1994 ## 38 19888 Rp1 chr1 9747 0 Challenge 2.2 What == does is compare vect1 with c(5,10) one by one. Since c(5,10) only has two elements, R repeats this shorter vector until it is the same length as the longer vector. This is called ‘recycling’. Thus, the comparisons being made is the top row with each corresponding value in the bottom row, with the result being shown in the third row: 10 10 5 5 8 8 5 10 5 10 5 10 FALSE TRUE TRUE FALSE FALSE FALSE R gives you a warning whenever the length of the shorter vector is NOT a multiple of the longer vector. When there were 4 elements in the shorter vector, it was not repeated a whole number of times - it was repeated 1.5 times. The comparisons being made between vect1 and c(5,10,1,3) are: 10 10 5 5 8 8 5 10 1 3 5 10 FALSE TRUE FALSE FALSE FALSE FALSE %in% simply performs matching and does not take order of the two vectors into consideration. It checks whether the values in vect1 matches either number in c(5,10). It thus gives us the result we expect. Challenge 2.3 genes2 &lt;- merge(x = genes, y = gene_names, by.x = &quot;EntrezID&quot;, by.y = &quot;ENTREZID&quot;, by.x = TRUE, by.y = TRUE) Challenge 2.4 If you provide rnorm() with a vector of inputs to either the mean or sd argument, it will use each element in that vector for successive random numbers generated and recycle the vector if it is shorter than the number of random numbers required. Thus, the following code: rnorm(3, mean = c(100,0), sd = 1) will generate 3 random numbers from a normal distribution of: 1. mean of 100 and sd of 1 2. mean of 0 and sd of 1 3. mean of 100 and sd of 1 If you do not provide the name of the argument, rnorm() will use the first number provided as the argument to n, the second number provided as the input to mean and the third number provided as the input to sd. Thus, rnorm(3,1,10) generates 3 random numbers from a normal distribution with a mean of 1 and a standard deviation of 10 and rnorm(3,10,1) will generate 3 random numbers from a normal distribution with a mean of 10 and a standard deviation of 1. If you give the argument name with the input, it does not matter what order you provide the inputs. "],
["session-3.html", "Chapter 3 Session 3 3.1 Lists 3.2 S4 objects 3.3 Packages 3.4 DGEList 3.5 Homework 3.6 Answers", " Chapter 3 Session 3 In this session we will learn: lists, another data structure S4 objects the DGEList object from the package limma 3.1 Lists Recall that we have previously learnt about the data structures: vectors, matrices and dataframes. Another important data structure is the list. Like a vector, it is 1 dimensional i.e. one row of data. Unlike vectors, you can put several data types in a list. Here, our list includes data of the integer, a character and a double types: list(1, &quot;a&quot;, 1.5) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] 1.5 Not only can you put different data types into a list, you can also put a WHOLE data structure into one element of a list. In the list below, the first element is a vector that contains 3 numbers, the second element is a character and the third element is a dataframe that has two columns. list(c(1,2,3), c(&quot;words&quot;, &quot;letters&quot;), data.frame(column1 = c(1,2,3), column2 = c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)) ) ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;words&quot; &quot;letters&quot; ## ## [[3]] ## column1 column2 ## 1 1 a ## 2 2 b ## 3 3 c The output can often help you understand how the list is structured. The double brackets (e.g. [[1]]) signifies an element of the list and which index it is at. Here there are three elements in our list so the numbers in the double square brackets go from 1 to 3. Underneath the [[1]] and [[2]], there is a [1] - this indicates that the first and second elements both contain a vector. Underneath [[3]] you see the standard output for a dataframe, which we have seen before. You even include a list within a list (within a list, within a list….I call this ‘list - ception’). This is where it starts to get confusing. list(1, list(1,&quot;a&quot;)) ## [[1]] ## [1] 1 ## ## [[2]] ## [[2]][[1]] ## [1] 1 ## ## [[2]][[2]] ## [1] &quot;a&quot; The first element, indicated by [[1]], is a vector, indicated by the [1] underneath. The second element, indicated by the first [[2]] contains a list: [[2]][[1]] - tells you that the second element is a list, of which the first element of the inner list is the number 1. [[2]][[2]] - tells you that the second element is a list, of which the second element of the inner list is “a”. Many bioconductor packages, including limma, use lists so it is an important data structure to understand. Challenge 3.1 Below is the output from a list. How many element of the list are there? Look carefully at each element and answer the following questions about EVERY element of the list: How many elements does the element of the list contain? If there are several elements within this element, what does each element contain? ## [[1]] ## [[1]][[1]] ## [1] 1 2 ## ## [[1]][[2]] ## [1] &quot;b&quot; ## ## ## [[2]] ## [1] &quot;a&quot; &quot;b&quot; ## ## [[3]] ## [[3]][[1]] ## [[3]][[1]][[1]] ## [1] &quot;a&quot; ## ## [[3]][[1]][[2]] ## [1] 1 ## ## ## [[3]][[2]] ## [1] &quot;b&quot; ## ## ## [[4]] ## [1] &quot;end&quot; We can access elements of a list using square brackets. You may have noticed that there are often double square brackets [[ ]]. There is a subtle but important difference between single square brackets and double square brackets when subsetting lists. Let’s make a list: my_list &lt;- list( c(&quot;a&quot;,&quot;b&quot;), c(1,2,3), c(4,5,6) ) Take a look at the output of obtaining the first element with single square brackets and double square brackets: my_list[1] ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; The difference is minor; with my_list[1] there is an extra [[1]] at the top, with my_list[[1]] there is no [[1]] at the top. The str() function gives us some more information: str(my_list[1]) ## List of 1 ## $ : chr [1:2] &quot;a&quot; &quot;b&quot; str(my_list[[1]]) ## chr [1:2] &quot;a&quot; &quot;b&quot; This tells us that when you use single brackets, the output is a list containing one element, which is a vector. When you use double brackets, the output is just a vector, NOT contained within a list. Let’s use an analogy to gain a better understanding of this concept. Below is a picture of a cargo train, which contains a box in each segment. This represents a list containing 3 elements, with each element being the box. Figure 3.1: Cargo train representation of a list. Using a single bracket returns you the train segment with the box inside. Figure 3.2: Single brackets with our cargo train list. Using double brackets returns you just the box inside. Figure 3.3: Double brackets with our cargo train list. Back to our list: my_list ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; ## ## [[2]] ## [1] 1 2 3 ## ## [[3]] ## [1] 4 5 6 To obtain the first element of the vector contained within the first element of the list (the &quot;a&quot;) you can use: my_list[[1]][1] ## [1] &quot;a&quot; The [[1]] gives you just the vector contained within the first element of the list: my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; The second square bracket [1] then gives you the first element of the vector: my_list[[1]][1] ## [1] &quot;a&quot; Challenge 3.2 First create a new list: my_list2 &lt;- list( c(&quot;a&quot;,&quot;b&quot;), c(1,2,3), data.frame(Name = c(&quot;Sally&quot;, &quot;Andy&quot;), Age = c(40,32)) ) my_list2 ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; ## ## [[2]] ## [1] 1 2 3 ## ## [[3]] ## Name Age ## 1 Sally 40 ## 2 Andy 32 Subset this list to obtain a data structure that gives the following outputs: ## [1] &quot;a&quot; &quot;b&quot; ## [1] &quot;b&quot; ## [[1]] ## [1] 1 2 3 ## [1] 40 ## Name Age ## 1 Sally 40 ## [[1]] ## Name Age ## 1 Sally 40 ## 2 Andy 32 3.1.1 Named list You can also have names for each element of your list: named_list &lt;- list( name = c(&quot;Andy&quot;, &quot;Sally&quot;), age = c(32,40) ) named_list ## $name ## [1] &quot;Andy&quot; &quot;Sally&quot; ## ## $age ## [1] 32 40 If your list is named, you can use $ to access each element of your list: named_list$name ## [1] &quot;Andy&quot; &quot;Sally&quot; Note that the output is just the vector, NOT a vector within a list. Thus named_list[[1]] does the same thing as named_list$name. Recall that we access columns in dataframes with the $ symbol as well. This means that if you have a dataframe within a list, you can obtain a column within the dataframe that is within the list using two $’s: Let’s start with a list that contains a dataframe as its first element named_list2 &lt;- list( details = data.frame(name = c(&quot;Andy&quot;, &quot;Sally&quot;), age = c(32,40)) ) named_list2 ## $details ## name age ## 1 Andy 32 ## 2 Sally 40 We can get the age column using: named_list2$details$age ## [1] 32 40 Extra:The reason you can also access columns in a dataframe with $ is because ‘under the hood’ a dataframe is actually a list. It is a list with the constraint that each element is a vector of the same length. Each element in the list is thus a column in the ‘dataframe’. Challenge 3.3 Take a look at the named list below: named_list3 &lt;- list( cats = data.frame(name = c(&quot;Garfield&quot;, &quot;Hello Kitty&quot;), age = c(3,10), stringsAsFactors = FALSE), dogs = data.frame(name = c(&quot;Spot&quot;, &quot;Snoopy&quot;), age = c(5,14), stringsAsFactors = FALSE) ) named_list3 ## $cats ## name age ## 1 Garfield 3 ## 2 Hello Kitty 10 ## ## $dogs ## name age ## 1 Spot 5 ## 2 Snoopy 14 Using just $, obtain: the vector of cat names the dog dataframe the vector of dog ages 3.2 S4 objects Everything in R is an ‘object’ - every function that we have used and every data structure created in R. All the objects we have used so far, are ‘S3’ objects. Bioconductor is an open source project to provide tools for the analysis of high-throughput genomic data. There are more than 1,500 R packages on Bioconductor. Most objects in Bioconductor packages are ‘S4’ objects. ‘S4’ objects are much more ‘formal’ than S3 objects. Let’s look at an example. The DGEList object from limma is a S4 object. It is a data structure specifically designed for storing read count data from sequencing. It is a list that contains two specific components: counts - which must be a numeric matrix, that stores counts. Each row must be a gene and each column must be a sample. samples - which must be a dataframe, that contains information about each sample. Each row must be a sample and must contain information about the group (e.g. treatment group) the sample belongs to, the library size of that sample and the normalisation factor for that sample. There are also a number of optional components the DGEList, such as a dataframe containing gene annotation information. There are a lot more specifications about the type of and how data is stored in the DGEList S4 object, than say the S3 list. You can think of S3 objects as very genetic tools (e.g. a spanner) whereas S4 objects tend to be tools designed for a very specific task (e.g. a lug wrench, which is used to loosen and tighten lug nuts on car wheels). You can read more about the S4 objects in this Bioconductor tutorial. 3.3 Packages Last session we installed the packages limma and edgeR. This downloads the files for each package and saves them to your computer. You generally only need to do this once. To use a package you must ‘load’ them each time you start a new R session. You do this with the library() function. Let’s load both limma and edgeR: library(edgeR) library(limma) 3.4 DGEList The RNA sequencing analysis you will be guided through is a simplified version of that performed in the article from Law et al. (Law et al. 2016). The RNA sequencing data we will use is from Sheridan et al. (Sheridan et al. 2015). It consists of samples from 3 cell populations; basal, luminal progenitor (LP) and mature luminal (ML), which has been sorted from the mammary glands of female virgin mice. The reads have been aligned to the mouse reference genome (mm10) and reads summarised at the gene-level (using mm10 RefSeq-based annotation) to obtain gene counts. Gene level summarisation involves counting the number of reads mapped to each gene - the resulting ‘count of reads’ is often referred to simply as ‘counts’. We are going to start our RNA-seq analysis with gene counts. The data files for this session should have been emailed to you (you can also obtain them from Github). Please uncompress (extract) the files and put them in your working directory. Each data file details the number of reads mapped to a gene for 1 sample. There is 1 data file for each sample. Within each data file, there are 3 columns - EntrezID, GeneLength and Count. We will be looking at 9 samples (and 9 data files) in total. Their details are shown below: Table 3.1: Summary of samples. File name Sample name Phenotype group GSM1545535_10_6_5_11.txt 10_6_5_11 LP GSM1545536_9_6_5_11.txt 9_6_5_11 ML GSM1545538_purep53.txt purep53 Basal GSM1545539_JMS8-2.txt JMS8-2 Basal GSM1545540_JMS8-3.txt JMS8-3 ML GSM1545541_JMS8-4.txt JMS8-4 LP GSM1545542_JMS8-5.txt JMS8-5 Basal GSM1545544_JMS9-P7c.txt JMS9-P7c ML GSM1545545_JMS9-P8c.txt JMS9-P8c LP To create a DGEList object, we will use the readDGE() function. We must gives this function the following arguments: files - a vector of data file names path - the path to the directory that contains your data files. If the data files are in your working directory, don’t worry about this argument. If the data files are somewhere else, like a folder called ‘data’, in your working directory you must give the path to that folder colums - the columns of the input files which have the gene names and counts respectively (as the column indices) First, we will create a vector of the file names. You can simply copy and paste this code into your R script. files &lt;- c(&quot;GSM1545535_10_6_5_11.txt&quot;, &quot;GSM1545536_9_6_5_11.txt&quot;, &quot;GSM1545538_purep53.txt&quot;, &quot;GSM1545539_JMS8-2.txt&quot;, &quot;GSM1545540_JMS8-3.txt&quot;, &quot;GSM1545541_JMS8-4.txt&quot;, &quot;GSM1545542_JMS8-5.txt&quot;, &quot;GSM1545544_JMS9-P7c.txt&quot;, &quot;GSM1545545_JMS9-P8c.txt&quot;) Now we will create our DGEList object. I have put my data files in a folder called “data” (within my working directory), thus I must specify path = &quot;data&quot;. Depending on where you have put your data files, you may need a different input to path or not have to include the path argument. x &lt;- readDGE(files, path = &quot;data&quot;, columns = c(1,3)) The object we created has 2 elements, one named samples and one named counts. Let’s take a look at each: head(x$counts) ## Samples ## Tags GSM1545535_10_6_5_11 GSM1545536_9_6_5_11 GSM1545538_purep53 ## 497097 1 2 342 ## 100503874 0 0 5 ## 100038431 0 0 0 ## 19888 0 1 0 ## 20671 1 1 76 ## 27395 431 771 1368 ## Samples ## Tags GSM1545539_JMS8-2 GSM1545540_JMS8-3 GSM1545541_JMS8-4 ## 497097 526 3 3 ## 100503874 6 0 0 ## 100038431 0 0 0 ## 19888 0 17 2 ## 20671 40 33 14 ## 27395 1268 1564 769 ## Samples ## Tags GSM1545542_JMS8-5 GSM1545544_JMS9-P7c GSM1545545_JMS9-P8c ## 497097 535 2 0 ## 100503874 5 0 0 ## 100038431 1 0 0 ## 19888 0 1 0 ## 20671 98 18 8 ## 27395 818 468 342 Recall that DGEList specifies that the counts element of the list must be a numeric matrix, that stores the counts. Each row must be a gene and each column must be a sample. Note that the column names are the file names and the rownames are the EntrezID’s. head(x$samples) ## files group lib.size norm.factors ## GSM1545535_10_6_5_11 GSM1545535_10_6_5_11.txt 1 32863052 1 ## GSM1545536_9_6_5_11 GSM1545536_9_6_5_11.txt 1 35335491 1 ## GSM1545538_purep53 GSM1545538_purep53.txt 1 57160817 1 ## GSM1545539_JMS8-2 GSM1545539_JMS8-2.txt 1 51368625 1 ## GSM1545540_JMS8-3 GSM1545540_JMS8-3.txt 1 75795034 1 ## GSM1545541_JMS8-4 GSM1545541_JMS8-4.txt 1 60517657 1 This is a dataframe where each row is 1 sample, and details of each sample is given in the 4 columns. files gives the file names. group details the phenotype group the sample belongs to. As we have not specified this yet, the default 1 is given for each sample. lib.size gives the library size. This is the total sum of all counts for that sample. norm.factors this gives the normalisation factor for each sample. As we have not calculated any normalisation factors, this is 1 for each sample. This dataframe also has rownames, which are currently the file names of each sample. Let’s change them to be the sample names (see Table 3.1). We can do this by first creating a vector of sample names. You can simply copy and paste the code below into your R script. samplenames &lt;- c(&quot;10_6_5_11&quot;, &quot;9_6_5_11&quot;, &quot;purep53&quot;, &quot;JMS8-2&quot;, &quot;JMS8-3&quot;, &quot;JMS8-4&quot;, &quot;JMS8-5&quot;, &quot;JMS9-P7c&quot;, &quot;JMS9-P8c&quot;) We can change the rownames in the samples dataframe using the rownames() function. This function will give you the row names of a data structure (a dataframe in this instance): rownames(x$samples) ## [1] &quot;GSM1545535_10_6_5_11&quot; &quot;GSM1545536_9_6_5_11&quot; &quot;GSM1545538_purep53&quot; ## [4] &quot;GSM1545539_JMS8-2&quot; &quot;GSM1545540_JMS8-3&quot; &quot;GSM1545541_JMS8-4&quot; ## [7] &quot;GSM1545542_JMS8-5&quot; &quot;GSM1545544_JMS9-P7c&quot; &quot;GSM1545545_JMS9-P8c&quot; We can see that the row names are the file names as we saw above. To replace these file names with the sample names we can run: rownames(x$samples) &lt;- samplenames We have seen this type of notation before in session 1 (section 1.11). This code assigns the samplenames vector as the row names of the samples dataframe. Challenge 3.4 Use the colnames() function to replace the column names of the count matrix from being file names to sample names. The code below creates a factor vector (called group) that specifies the phenotype group each sample belongs to. It is ordered such that the first element in the vector corresponds to the first row of the samples dataframe. group &lt;- as.factor(c(&quot;LP&quot;, &quot;ML&quot;, &quot;Basal&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;)) Replace the group column of the samples dataframe with the group factor vector. Hint: you will need to use the list subsetting notation we learnt at the start of this session. Additional gene annotation information about the genes from our RNA-seq data can be found in the file “Ses3_geneAnnot.tsv”. Read this file in and add it as another element named genes in x (our DGEList object). Hint: the command for adding an element to a list is similar to the command for adding a column to a dataframe. Take a look at Section 1.11 to review the latter. 3.5 Homework Subset the first column of the count matrix from x (our DGEList object) and ‘save’ (assign) it to a variable called sample1. Find out how many genes had a count of ‘0’. Find the total sum of all counts for that sample. Compare this number with the corresponding (first) number in the lib.size column from the samples dataframe. Is it the same? Calculate the total sum of the library sizes, using the lib.size column from the samples dataframe from x (our DGEList object). Using the genes dataframe from x (our DGEList object), find out how many genes are from chromosome 5. Hint: you will need to remove rows where the TXCHROM column is NA. Revisit section 2.1 to review missing values. 3.6 Answers Challenge 3.1 There are 4 elements of this list. For each element - Within the first element, there are 2 elements. The first is a vector containing 2 numbers and the second is a vector containing one character type (note there are no ‘scalars’ in R, thus &quot;a&quot; is a vector with 1 element). The second element contains 1 element. It is a vector containing two character types. The third element contains 2 elements. Within the first element is another list. Within this list there are 2 elements, both being character types. The second element of this nested list is a vector containing one character type. The fourth element is a vector containing one character type. Challenge 3.2 my_list2[[1]] ## [1] &quot;a&quot; &quot;b&quot; my_list2[[1]][2] ## [1] &quot;b&quot; my_list2[2] ## [[1]] ## [1] 1 2 3 my_list2[[3]][1,2] ## [1] 40 my_list2[[3]][1,] ## Name Age ## 1 Sally 40 my_list2[3] ## [[1]] ## Name Age ## 1 Sally 40 ## 2 Andy 32 Challenge 3.3 # 1. the vector of cat names named_list3$cats$name ## [1] &quot;Garfield&quot; &quot;Hello Kitty&quot; # 2. the dog dataframe named_list3$dogs ## name age ## 1 Spot 5 ## 2 Snoopy 14 # 3. the vector of dog ages named_list3$dogs$age ## [1] 5 14 Challenge 3.4 # 1 colnames(x$counts) &lt;- samplenames # 2 x$samples$group &lt;- group # 3 geneAnnot &lt;- read.delim(&quot;data/Ses3_geneAnnot.tsv&quot;, stringsAsFactors = FALSE) x$genes &lt;- geneAnnot "],
["session-4.html", "Chapter 4 Session 4 4.1 Filtering 4.2 Normalisation 4.3 MDS plot 4.4 Linear modelling 4.5 Statistical testing 4.6 Answers", " Chapter 4 Session 4 In this session we will run through the basic steps for analysing a simply RNA-seq experiment. This includes: filtering out lowly expressed genes normalisation creating a multidimensional scaling plot (MDS) creating a design matrix fitting gene-wise linear models (with empirical Bayes moderation to more accurately estimate gene-wise variability) performing statistical testing for differential expression The aim of this session is to give you an basic understanding and intuition about each of the basic RNA-seq analysis steps. It does NOT aim to teach you statistics. 4.1 Filtering Let’s start by re-creating our DGEList object: files &lt;- c(&quot;GSM1545535_10_6_5_11.txt&quot;, &quot;GSM1545536_9_6_5_11.txt&quot;, &quot;GSM1545538_purep53.txt&quot;, &quot;GSM1545539_JMS8-2.txt&quot;, &quot;GSM1545540_JMS8-3.txt&quot;, &quot;GSM1545541_JMS8-4.txt&quot;, &quot;GSM1545542_JMS8-5.txt&quot;, &quot;GSM1545544_JMS9-P7c.txt&quot;, &quot;GSM1545545_JMS9-P8c.txt&quot;) x &lt;- readDGE(files, path = &quot;data&quot;, columns = c(1,3)) geneAnnot &lt;- read.delim(&quot;data/Ses3_geneAnnot.tsv&quot;, stringsAsFactors = FALSE) x$genes &lt;- geneAnnot Lowly expressed genes tend to have more variable count values. There are two reasons for this: RNA sequencing can be thought of as sampling. You start with many, many RNA molecules. You sample from this ‘population’ of RNAs by sequencing a small proportion of those molecules. Your sample consists of the RNA molecules that were sequenced. This is generally a very small proportion of the total ‘population’ of RNAs you started with. For example, if you start with 100ng of mRNA and sequence ~300 million reads, you only sequence 0.0013% of the mRNA that you started with (McIntyre et al. 2011). It is difficult to obtain accurate measures of the true abundance of each RNA species when you only sample such a small proportion of the total ‘population’ of mRNAs. Measurement errors will occur simply due to the random nature of the sampling process. This problem affects lowly abundant RNA species more because the error is a larger proportion of Technical variation is higher for lowly abundant RNA species (McIntyre et al. 2011). Removing these highly variable, lowly expressed genes increases your ‘power’ to detect differentially expressed genes. Challenge 4.1 4.2 Normalisation 4.3 MDS plot 4.4 Linear modelling 4.4.1 Design matrix 4.5 Statistical testing 4.6 Answers Challenge 4.1 "]
]
